// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/types/type_tss_keysign.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TssKeysignFailVoter struct {
	ID          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Height      int64    `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Signers     []string `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`
	Round7Count int64    `protobuf:"varint,7,opt,name=round7_count,json=round7Count,proto3" json:"round7_count,omitempty"`
}

func (m *TssKeysignFailVoter) Reset()      { *m = TssKeysignFailVoter{} }
func (*TssKeysignFailVoter) ProtoMessage() {}
func (*TssKeysignFailVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c05e84489c3b0d, []int{0}
}
func (m *TssKeysignFailVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TssKeysignFailVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TssKeysignFailVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TssKeysignFailVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TssKeysignFailVoter.Merge(m, src)
}
func (m *TssKeysignFailVoter) XXX_Size() int {
	return m.Size()
}
func (m *TssKeysignFailVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_TssKeysignFailVoter.DiscardUnknown(m)
}

var xxx_messageInfo_TssKeysignFailVoter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TssKeysignFailVoter)(nil), "types.TssKeysignFailVoter")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/types/type_tss_keysign.proto", fileDescriptor_b2c05e84489c3b0d)
}

var fileDescriptor_b2c05e84489c3b0d = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2d, 0xc9, 0xc8, 0x2f,
	0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2f, 0x33, 0xd4, 0xaf, 0xd0, 0x47, 0x70, 0x4b, 0x2a, 0x0b,
	0x52, 0x8b, 0xc1, 0x64, 0x7c, 0x49, 0x71, 0x71, 0x7c, 0x76, 0x6a, 0x65, 0x71, 0x66, 0x7a, 0x9e,
	0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe, 0x10, 0x2b, 0x58, 0x56, 0x4a, 0x24, 0x3d, 0x3f, 0x3d, 0x1f,
	0x2c, 0xa2, 0x0f, 0x62, 0x41, 0x24, 0x95, 0x9a, 0x18, 0xb9, 0x84, 0x43, 0x8a, 0x8b, 0xbd, 0x21,
	0x3a, 0xdc, 0x12, 0x33, 0x73, 0xc2, 0xf2, 0x4b, 0x52, 0x8b, 0x84, 0xc4, 0xb8, 0x98, 0x32, 0x53,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x9d, 0xd8, 0x1e, 0xdd, 0x93, 0x67, 0xf2, 0x74, 0x09, 0x62,
	0xca, 0x4c, 0x11, 0x12, 0xe3, 0x62, 0xcb, 0x48, 0xcd, 0x4c, 0xcf, 0x28, 0x91, 0x60, 0x51, 0x60,
	0xd4, 0x60, 0x0e, 0x82, 0xf2, 0x84, 0x24, 0xb8, 0xd8, 0x41, 0x06, 0xa4, 0x16, 0x15, 0x4b, 0xb0,
	0x29, 0x30, 0x6b, 0x70, 0x06, 0xc1, 0xb8, 0x42, 0x8a, 0x5c, 0x3c, 0x45, 0xf9, 0xa5, 0x79, 0x29,
	0xe6, 0xf1, 0xc9, 0xf9, 0xa5, 0x79, 0x25, 0x12, 0xec, 0x60, 0x7d, 0xdc, 0x10, 0x31, 0x67, 0x90,
	0x90, 0x53, 0xe8, 0x89, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x34, 0x3c, 0x92, 0x63, 0x38,
	0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63,
	0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xfd, 0xf4, 0xcc, 0x92, 0x9c, 0xc4,
	0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x64, 0xaf, 0x67, 0xe4, 0x17, 0xe5, 0xe5, 0xa7, 0xa4, 0x62, 0x86,
	0x47, 0x12, 0x1b, 0xd8, 0x8b, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x13, 0x46, 0xbe, 0xdc,
	0x38, 0x01, 0x00, 0x00,
}

func (m *TssKeysignFailVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TssKeysignFailVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TssKeysignFailVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Round7Count != 0 {
		i = encodeVarintTypeTssKeysign(dAtA, i, uint64(m.Round7Count))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTypeTssKeysign(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Height != 0 {
		i = encodeVarintTypeTssKeysign(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypeTssKeysign(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeTssKeysign(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeTssKeysign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TssKeysignFailVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypeTssKeysign(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTypeTssKeysign(uint64(m.Height))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTypeTssKeysign(uint64(l))
		}
	}
	if m.Round7Count != 0 {
		n += 1 + sovTypeTssKeysign(uint64(m.Round7Count))
	}
	return n
}

func sovTypeTssKeysign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeTssKeysign(x uint64) (n int) {
	return sovTypeTssKeysign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TssKeysignFailVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeTssKeysign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TssKeysignFailVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TssKeysignFailVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTssKeysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTssKeysign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTssKeysign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTssKeysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTssKeysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTssKeysign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTssKeysign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round7Count", wireType)
			}
			m.Round7Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTssKeysign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round7Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypeTssKeysign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypeTssKeysign
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypeTssKeysign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeTssKeysign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeTssKeysign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeTssKeysign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeTssKeysign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeTssKeysign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeTssKeysign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeTssKeysign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeTssKeysign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeTssKeysign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeTssKeysign = fmt.Errorf("proto: unexpected end of group")
)
