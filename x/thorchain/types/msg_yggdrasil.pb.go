// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/types/msg_yggdrasil.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "gitlab.com/thorchain/thornode/common"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgYggdrasil struct {
	Tx          common.Tx                                     `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx"`
	PubKey      gitlab_com_thorchain_thornode_common.PubKey   `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3,casttype=gitlab.com/thorchain/thornode/common.PubKey" json:"pub_key,omitempty"`
	AddFunds    bool                                          `protobuf:"varint,3,opt,name=add_funds,json=addFunds,proto3" json:"add_funds,omitempty"`
	Coins       gitlab_com_thorchain_thornode_common.Coins    `protobuf:"bytes,4,rep,name=coins,proto3,castrepeated=gitlab.com/thorchain/thornode/common.Coins" json:"coins"`
	BlockHeight int64                                         `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Signer      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,6,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgYggdrasil) Reset()         { *m = MsgYggdrasil{} }
func (m *MsgYggdrasil) String() string { return proto.CompactTextString(m) }
func (*MsgYggdrasil) ProtoMessage()    {}
func (*MsgYggdrasil) Descriptor() ([]byte, []int) {
	return fileDescriptor_046d65074541e9df, []int{0}
}
func (m *MsgYggdrasil) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgYggdrasil) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgYggdrasil.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgYggdrasil) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgYggdrasil.Merge(m, src)
}
func (m *MsgYggdrasil) XXX_Size() int {
	return m.Size()
}
func (m *MsgYggdrasil) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgYggdrasil.DiscardUnknown(m)
}

var xxx_messageInfo_MsgYggdrasil proto.InternalMessageInfo

func (m *MsgYggdrasil) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func (m *MsgYggdrasil) GetPubKey() gitlab_com_thorchain_thornode_common.PubKey {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *MsgYggdrasil) GetAddFunds() bool {
	if m != nil {
		return m.AddFunds
	}
	return false
}

func (m *MsgYggdrasil) GetCoins() gitlab_com_thorchain_thornode_common.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *MsgYggdrasil) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgYggdrasil) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgYggdrasil)(nil), "types.MsgYggdrasil")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/types/msg_yggdrasil.proto", fileDescriptor_046d65074541e9df)
}

var fileDescriptor_046d65074541e9df = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xcd, 0xaa, 0x9b, 0x40,
	0x18, 0x75, 0x4c, 0x62, 0x93, 0x89, 0x2b, 0xe9, 0x42, 0x52, 0xd0, 0x69, 0x57, 0xd2, 0x92, 0x48,
	0xec, 0x13, 0xc4, 0x42, 0x49, 0x28, 0x85, 0x22, 0xa5, 0xd0, 0x6e, 0x44, 0x1d, 0x3b, 0x0e, 0x89,
	0x8e, 0x38, 0x63, 0xd1, 0xb7, 0xe8, 0x73, 0xf4, 0x49, 0xb2, 0xcc, 0xb2, 0x9b, 0xa6, 0x97, 0xe4,
	0x2d, 0xb2, 0xba, 0xf8, 0x13, 0xee, 0xbd, 0x5c, 0xb8, 0xdc, 0xd5, 0xf9, 0xbe, 0x33, 0x73, 0xce,
	0x77, 0xe0, 0x40, 0x47, 0x24, 0xac, 0x88, 0x92, 0x80, 0x66, 0xf6, 0xaf, 0xa5, 0x5d, 0xd9, 0x77,
	0xab, 0xa8, 0xf3, 0x98, 0xdb, 0x29, 0x27, 0x7e, 0x4d, 0x08, 0x2e, 0x02, 0x4e, 0x77, 0x8b, 0xbc,
	0x60, 0x82, 0x69, 0xa3, 0xf6, 0x69, 0x86, 0x1e, 0x48, 0x23, 0x96, 0xa6, 0x2c, 0xeb, 0xa1, 0xfb,
	0x38, 0x7b, 0x49, 0x18, 0x61, 0xed, 0x68, 0x37, 0x53, 0xc7, 0xbe, 0xf9, 0x27, 0x43, 0xf5, 0x33,
	0x27, 0xdf, 0xaf, 0xae, 0x1a, 0x82, 0xb2, 0xa8, 0x74, 0x80, 0x80, 0x35, 0x75, 0xe0, 0xa2, 0x77,
	0xf8, 0x5a, 0xb9, 0xc3, 0xfd, 0xd1, 0x94, 0x3c, 0x59, 0x54, 0xda, 0x1a, 0xbe, 0xc8, 0xcb, 0xd0,
	0xdf, 0xc6, 0xb5, 0x2e, 0x23, 0x60, 0x4d, 0x5c, 0xfb, 0x72, 0x34, 0xdf, 0x11, 0x2a, 0x76, 0x41,
	0xd8, 0x08, 0xee, 0xc7, 0x4e, 0x58, 0x91, 0x31, 0x1c, 0x5f, 0x93, 0x7c, 0x29, 0xc3, 0x4f, 0x71,
	0xed, 0x29, 0x79, 0x8b, 0xda, 0x2b, 0x38, 0x09, 0x30, 0xf6, 0x7f, 0x96, 0x19, 0xe6, 0xfa, 0x00,
	0x01, 0x6b, 0xec, 0x8d, 0x03, 0x8c, 0x3f, 0x36, 0xbb, 0xf6, 0x0d, 0x8e, 0x22, 0x46, 0x33, 0xae,
	0x0f, 0xd1, 0xc0, 0x9a, 0x3a, 0xea, 0x35, 0xcb, 0x07, 0x46, 0x33, 0xd7, 0x69, 0xd2, 0xfc, 0xf9,
	0x6f, 0xbe, 0x7d, 0xd6, 0xd9, 0x46, 0xc2, 0xbd, 0xce, 0x4e, 0x7b, 0x0d, 0xd5, 0x70, 0xc7, 0xa2,
	0xad, 0x9f, 0xc4, 0x94, 0x24, 0x42, 0x1f, 0x21, 0x60, 0x0d, 0xbc, 0x69, 0xcb, 0xad, 0x5b, 0x4a,
	0xdb, 0x40, 0x85, 0x53, 0x92, 0xc5, 0x85, 0xae, 0x20, 0x60, 0xa9, 0xee, 0xf2, 0x72, 0x34, 0xe7,
	0x84, 0x8a, 0xa4, 0xec, 0x2e, 0x45, 0x8c, 0xa7, 0x8c, 0xf7, 0x30, 0xe7, 0x78, 0xdb, 0xf5, 0xb3,
	0x58, 0x45, 0xd1, 0x0a, 0xe3, 0x22, 0xe6, 0xdc, 0xeb, 0x0d, 0xdc, 0xcd, 0xfe, 0x64, 0x80, 0xc3,
	0xc9, 0x00, 0x37, 0x27, 0x03, 0xfc, 0x3e, 0x1b, 0xd2, 0xe1, 0x6c, 0x48, 0x7f, 0xcf, 0x86, 0xf4,
	0xc3, 0x7e, 0x3a, 0xfa, 0xa3, 0xf6, 0x43, 0xa5, 0x6d, 0xec, 0xfd, 0x6d, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x01, 0x26, 0x02, 0x95, 0x26, 0x02, 0x00, 0x00,
}

func (m *MsgYggdrasil) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgYggdrasil) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgYggdrasil) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgYggdrasil(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x32
	}
	if m.BlockHeight != 0 {
		i = encodeVarintMsgYggdrasil(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgYggdrasil(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AddFunds {
		i--
		if m.AddFunds {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMsgYggdrasil(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgYggdrasil(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMsgYggdrasil(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgYggdrasil(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgYggdrasil) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tx.Size()
	n += 1 + l + sovMsgYggdrasil(uint64(l))
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMsgYggdrasil(uint64(l))
	}
	if m.AddFunds {
		n += 2
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovMsgYggdrasil(uint64(l))
		}
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMsgYggdrasil(uint64(m.BlockHeight))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgYggdrasil(uint64(l))
	}
	return n
}

func sovMsgYggdrasil(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgYggdrasil(x uint64) (n int) {
	return sovMsgYggdrasil(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgYggdrasil) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgYggdrasil
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgYggdrasil: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgYggdrasil: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgYggdrasil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgYggdrasil
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgYggdrasil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgYggdrasil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgYggdrasil
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgYggdrasil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = gitlab_com_thorchain_thornode_common.PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFunds", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgYggdrasil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddFunds = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgYggdrasil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgYggdrasil
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgYggdrasil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, common.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgYggdrasil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgYggdrasil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgYggdrasil
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgYggdrasil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgYggdrasil(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgYggdrasil
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgYggdrasil
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgYggdrasil(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgYggdrasil
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgYggdrasil
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgYggdrasil
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgYggdrasil
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgYggdrasil
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgYggdrasil
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgYggdrasil        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgYggdrasil          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgYggdrasil = fmt.Errorf("proto: unexpected end of group")
)
