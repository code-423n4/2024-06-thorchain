// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/types/type_liquidity_provider.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "gitlab.com/thorchain/thornode/common"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidityProvider struct {
	Asset              common.Asset                                 `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	RuneAddress        gitlab_com_thorchain_thornode_common.Address `protobuf:"bytes,2,opt,name=rune_address,json=runeAddress,proto3,casttype=gitlab.com/thorchain/thornode/common.Address" json:"rune_address,omitempty"`
	AssetAddress       gitlab_com_thorchain_thornode_common.Address `protobuf:"bytes,3,opt,name=asset_address,json=assetAddress,proto3,casttype=gitlab.com/thorchain/thornode/common.Address" json:"asset_address,omitempty"`
	LastAddHeight      int64                                        `protobuf:"varint,4,opt,name=last_add_height,json=lastAddHeight,proto3" json:"last_add_height,omitempty"`
	LastWithdrawHeight int64                                        `protobuf:"varint,5,opt,name=last_withdraw_height,json=lastWithdrawHeight,proto3" json:"last_withdraw_height,omitempty"`
	Units              github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,6,opt,name=units,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"units"`
	PendingRune        github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,7,opt,name=pending_rune,json=pendingRune,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"pending_rune"`
	PendingAsset       github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,8,opt,name=pending_asset,json=pendingAsset,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"pending_asset"`
	PendingTxID        gitlab_com_thorchain_thornode_common.TxID    `protobuf:"bytes,9,opt,name=pending_tx_Id,json=pendingTxId,proto3,casttype=gitlab.com/thorchain/thornode/common.TxID" json:"pending_tx_Id,omitempty"`
	RuneDepositValue   github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,10,opt,name=rune_deposit_value,json=runeDepositValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"rune_deposit_value"`
	AssetDepositValue  github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,11,opt,name=asset_deposit_value,json=assetDepositValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"asset_deposit_value"`
}

func (m *LiquidityProvider) Reset()         { *m = LiquidityProvider{} }
func (m *LiquidityProvider) String() string { return proto.CompactTextString(m) }
func (*LiquidityProvider) ProtoMessage()    {}
func (*LiquidityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_11a367af17b906f0, []int{0}
}
func (m *LiquidityProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProvider.Merge(m, src)
}
func (m *LiquidityProvider) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProvider.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProvider proto.InternalMessageInfo

func (m *LiquidityProvider) GetAsset() common.Asset {
	if m != nil {
		return m.Asset
	}
	return common.Asset{}
}

func (m *LiquidityProvider) GetRuneAddress() gitlab_com_thorchain_thornode_common.Address {
	if m != nil {
		return m.RuneAddress
	}
	return ""
}

func (m *LiquidityProvider) GetAssetAddress() gitlab_com_thorchain_thornode_common.Address {
	if m != nil {
		return m.AssetAddress
	}
	return ""
}

func (m *LiquidityProvider) GetLastAddHeight() int64 {
	if m != nil {
		return m.LastAddHeight
	}
	return 0
}

func (m *LiquidityProvider) GetLastWithdrawHeight() int64 {
	if m != nil {
		return m.LastWithdrawHeight
	}
	return 0
}

func (m *LiquidityProvider) GetPendingTxID() gitlab_com_thorchain_thornode_common.TxID {
	if m != nil {
		return m.PendingTxID
	}
	return ""
}

func init() {
	proto.RegisterType((*LiquidityProvider)(nil), "types.LiquidityProvider")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/types/type_liquidity_provider.proto", fileDescriptor_11a367af17b906f0)
}

var fileDescriptor_11a367af17b906f0 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x1b, 0xb6, 0x16, 0xe6, 0xb4, 0x82, 0x99, 0x1d, 0xa2, 0x1d, 0x92, 0x8a, 0x03, 0x74,
	0x12, 0x34, 0x03, 0xae, 0xbb, 0xb4, 0x1a, 0x12, 0x95, 0x38, 0x4c, 0xa1, 0x03, 0x09, 0x09, 0x85,
	0xac, 0xb6, 0x12, 0x8b, 0xd6, 0x0e, 0xb6, 0xd3, 0x75, 0xff, 0x05, 0x7f, 0xd6, 0x8e, 0xbb, 0x81,
	0x38, 0x44, 0x28, 0xfd, 0x2f, 0x76, 0x42, 0xfe, 0x91, 0x6d, 0x15, 0x12, 0x42, 0xb9, 0xd4, 0xf6,
	0xf3, 0xf7, 0x7d, 0xfa, 0xcd, 0x7b, 0x2f, 0x01, 0x47, 0x32, 0x63, 0x7c, 0x96, 0x25, 0x84, 0x86,
	0xcb, 0x97, 0xe1, 0x2a, 0xbc, 0x3d, 0xca, 0x8b, 0x1c, 0x0b, 0xfd, 0x1b, 0xcf, 0xc9, 0xb7, 0x82,
	0x20, 0x22, 0x2f, 0xe2, 0x9c, 0xb3, 0x25, 0x41, 0x98, 0x0f, 0x73, 0xce, 0x24, 0x83, 0x6d, 0x2d,
	0xda, 0xef, 0x6f, 0x40, 0x66, 0x6c, 0xb1, 0x60, 0xd4, 0x2e, 0x46, 0xb8, 0xbf, 0x97, 0xb2, 0x94,
	0xe9, 0x6d, 0xa8, 0x76, 0x26, 0xfa, 0xe4, 0x47, 0x07, 0xec, 0xbe, 0xab, 0xd9, 0x27, 0x16, 0x0d,
	0x0f, 0x40, 0x3b, 0x11, 0x02, 0x4b, 0xcf, 0xe9, 0x3b, 0x03, 0xf7, 0x55, 0x6f, 0x68, 0x49, 0x23,
	0x15, 0x1c, 0x6f, 0x5f, 0x96, 0x41, 0x2b, 0x32, 0x0a, 0xf8, 0x1e, 0x74, 0x79, 0x41, 0x71, 0x9c,
	0x20, 0xc4, 0xb1, 0x10, 0xde, 0xbd, 0xbe, 0x33, 0xd8, 0x19, 0x1f, 0x5e, 0x97, 0xc1, 0xf3, 0x94,
	0xc8, 0x79, 0x72, 0xa6, 0x72, 0xef, 0x3e, 0x53, 0xc6, 0x38, 0x65, 0x08, 0xd7, 0xe6, 0x46, 0x26,
	0x2f, 0x72, 0x15, 0xc5, 0x1e, 0xe0, 0x29, 0xe8, 0x69, 0xfa, 0x0d, 0x75, 0xab, 0x21, 0xb5, 0xab,
	0x31, 0x35, 0xf6, 0x29, 0x78, 0x38, 0x4f, 0x84, 0xa6, 0xc6, 0x19, 0x26, 0x69, 0x26, 0xbd, 0xed,
	0xbe, 0x33, 0xd8, 0x8a, 0x7a, 0x2a, 0x3c, 0x42, 0xe8, 0xad, 0x0e, 0xc2, 0x43, 0xb0, 0xa7, 0x75,
	0xe7, 0x44, 0x66, 0x88, 0x27, 0xe7, 0xb5, 0xb8, 0xad, 0xc5, 0x50, 0xdd, 0x7d, 0xb4, 0x57, 0x36,
	0xe3, 0x0d, 0x68, 0x17, 0x94, 0x48, 0xe1, 0x75, 0xb4, 0xd1, 0x50, 0x55, 0xe8, 0x57, 0x19, 0x3c,
	0x4b, 0x89, 0xcc, 0x0a, 0x63, 0x76, 0xc6, 0xc4, 0x82, 0x09, 0xbb, 0xbc, 0x10, 0xe8, 0xab, 0x69,
	0xef, 0xf0, 0x94, 0x50, 0x19, 0x99, 0x6c, 0x18, 0x81, 0x6e, 0x8e, 0x29, 0x22, 0x34, 0x8d, 0x55,
	0x39, 0xbc, 0xfb, 0xcd, 0x68, 0xae, 0x85, 0x44, 0x05, 0xc5, 0x70, 0x0a, 0x7a, 0x35, 0xd3, 0xf4,
	0xf4, 0x41, 0x33, 0x68, 0xed, 0x4c, 0xcf, 0x00, 0xfc, 0x72, 0x4b, 0x95, 0xab, 0x78, 0x82, 0xbc,
	0x1d, 0x4d, 0x3d, 0xaa, 0xca, 0xc0, 0x3d, 0x31, 0x17, 0xd3, 0xd5, 0xe4, 0xf8, 0xba, 0x0c, 0x0e,
	0xfe, 0xab, 0x61, 0x4a, 0x7c, 0xe3, 0x7b, 0xba, 0x9a, 0x20, 0xf8, 0x19, 0x40, 0x3d, 0x58, 0x08,
	0xe7, 0x4c, 0x10, 0x19, 0x2f, 0x93, 0x79, 0x81, 0x3d, 0xd0, 0xcc, 0xfc, 0x23, 0x85, 0x3a, 0x36,
	0xa4, 0x0f, 0x0a, 0x04, 0x63, 0xf0, 0xd8, 0x8c, 0xd8, 0x26, 0xdf, 0x6d, 0xc6, 0xdf, 0xd5, 0xac,
	0xbb, 0x7f, 0x30, 0x9e, 0x5c, 0x56, 0xbe, 0x73, 0x55, 0xf9, 0xce, 0xef, 0xca, 0x77, 0xbe, 0xaf,
	0xfd, 0xd6, 0xd5, 0xda, 0x6f, 0xfd, 0x5c, 0xfb, 0xad, 0x4f, 0xe1, 0xbf, 0x2b, 0xf2, 0xd7, 0x17,
	0xe0, 0xac, 0xa3, 0xdf, 0xd5, 0xd7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x40, 0xa2, 0xc1, 0x14,
	0x2a, 0x04, 0x00, 0x00,
}

func (m *LiquidityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AssetDepositValue.Size()
		i -= size
		if _, err := m.AssetDepositValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.RuneDepositValue.Size()
		i -= size
		if _, err := m.RuneDepositValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.PendingTxID) > 0 {
		i -= len(m.PendingTxID)
		copy(dAtA[i:], m.PendingTxID)
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(len(m.PendingTxID)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.PendingAsset.Size()
		i -= size
		if _, err := m.PendingAsset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.PendingRune.Size()
		i -= size
		if _, err := m.PendingRune.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Units.Size()
		i -= size
		if _, err := m.Units.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.LastWithdrawHeight != 0 {
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(m.LastWithdrawHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.LastAddHeight != 0 {
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(m.LastAddHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AssetAddress) > 0 {
		i -= len(m.AssetAddress)
		copy(dAtA[i:], m.AssetAddress)
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(len(m.AssetAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RuneAddress) > 0 {
		i -= len(m.RuneAddress)
		copy(dAtA[i:], m.RuneAddress)
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(len(m.RuneAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypeLiquidityProvider(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypeLiquidityProvider(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeLiquidityProvider(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidityProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovTypeLiquidityProvider(uint64(l))
	l = len(m.RuneAddress)
	if l > 0 {
		n += 1 + l + sovTypeLiquidityProvider(uint64(l))
	}
	l = len(m.AssetAddress)
	if l > 0 {
		n += 1 + l + sovTypeLiquidityProvider(uint64(l))
	}
	if m.LastAddHeight != 0 {
		n += 1 + sovTypeLiquidityProvider(uint64(m.LastAddHeight))
	}
	if m.LastWithdrawHeight != 0 {
		n += 1 + sovTypeLiquidityProvider(uint64(m.LastWithdrawHeight))
	}
	l = m.Units.Size()
	n += 1 + l + sovTypeLiquidityProvider(uint64(l))
	l = m.PendingRune.Size()
	n += 1 + l + sovTypeLiquidityProvider(uint64(l))
	l = m.PendingAsset.Size()
	n += 1 + l + sovTypeLiquidityProvider(uint64(l))
	l = len(m.PendingTxID)
	if l > 0 {
		n += 1 + l + sovTypeLiquidityProvider(uint64(l))
	}
	l = m.RuneDepositValue.Size()
	n += 1 + l + sovTypeLiquidityProvider(uint64(l))
	l = m.AssetDepositValue.Size()
	n += 1 + l + sovTypeLiquidityProvider(uint64(l))
	return n
}

func sovTypeLiquidityProvider(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeLiquidityProvider(x uint64) (n int) {
	return sovTypeLiquidityProvider(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeLiquidityProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneAddress = gitlab_com_thorchain_thornode_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetAddress = gitlab_com_thorchain_thornode_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAddHeight", wireType)
			}
			m.LastAddHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAddHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWithdrawHeight", wireType)
			}
			m.LastWithdrawHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWithdrawHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Units.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingRune.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingTxID = gitlab_com_thorchain_thornode_common.TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneDepositValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RuneDepositValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDepositValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetDepositValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeLiquidityProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypeLiquidityProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeLiquidityProvider(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeLiquidityProvider
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeLiquidityProvider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeLiquidityProvider
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeLiquidityProvider
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeLiquidityProvider
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeLiquidityProvider        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeLiquidityProvider          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeLiquidityProvider = fmt.Errorf("proto: unexpected end of group")
)
