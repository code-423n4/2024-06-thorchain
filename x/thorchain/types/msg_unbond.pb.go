// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/types/msg_unbond.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "gitlab.com/thorchain/thornode/common"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgUnBond struct {
	TxIn                common.Tx                                     `protobuf:"bytes,1,opt,name=tx_in,json=txIn,proto3" json:"tx_in"`
	NodeAddress         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=node_address,json=nodeAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"node_address,omitempty"`
	BondAddress         gitlab_com_thorchain_thornode_common.Address  `protobuf:"bytes,5,opt,name=bond_address,json=bondAddress,proto3,casttype=gitlab.com/thorchain/thornode/common.Address" json:"bond_address,omitempty"`
	Amount              github_com_cosmos_cosmos_sdk_types.Uint       `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	Signer              github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
	BondProviderAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,8,opt,name=bond_provider_address,json=bondProviderAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"bond_provider_address,omitempty"`
}

func (m *MsgUnBond) Reset()         { *m = MsgUnBond{} }
func (m *MsgUnBond) String() string { return proto.CompactTextString(m) }
func (*MsgUnBond) ProtoMessage()    {}
func (*MsgUnBond) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d6baab37586ac65, []int{0}
}
func (m *MsgUnBond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnBond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnBond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnBond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnBond.Merge(m, src)
}
func (m *MsgUnBond) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnBond) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnBond.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnBond proto.InternalMessageInfo

func (m *MsgUnBond) GetTxIn() common.Tx {
	if m != nil {
		return m.TxIn
	}
	return common.Tx{}
}

func (m *MsgUnBond) GetNodeAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.NodeAddress
	}
	return nil
}

func (m *MsgUnBond) GetBondAddress() gitlab_com_thorchain_thornode_common.Address {
	if m != nil {
		return m.BondAddress
	}
	return ""
}

func (m *MsgUnBond) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *MsgUnBond) GetBondProviderAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.BondProviderAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgUnBond)(nil), "types.MsgUnBond")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/types/msg_unbond.proto", fileDescriptor_1d6baab37586ac65)
}

var fileDescriptor_1d6baab37586ac65 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x6a, 0xea, 0x40,
	0x14, 0x86, 0x93, 0x7b, 0x35, 0xf7, 0x3a, 0xba, 0x4a, 0x5b, 0x08, 0x2e, 0x92, 0x50, 0x28, 0x75,
	0x51, 0x9d, 0xda, 0x3e, 0x81, 0xd9, 0x14, 0x17, 0x85, 0x62, 0x75, 0xd3, 0x8d, 0xc4, 0x24, 0x24,
	0x43, 0x9b, 0x39, 0x32, 0x33, 0x4a, 0xfa, 0x16, 0x7d, 0x2c, 0x97, 0x2e, 0xa5, 0x8b, 0x50, 0xf4,
	0x2d, 0x5c, 0x95, 0x49, 0x46, 0xb1, 0x14, 0x4a, 0x71, 0x35, 0xe7, 0x1c, 0xf2, 0x7f, 0xe4, 0x3b,
	0x1c, 0x84, 0x45, 0x02, 0x2c, 0x48, 0x7c, 0x42, 0xf1, 0xbc, 0x8b, 0xb3, 0x83, 0x56, 0xbc, 0x4e,
	0x23, 0x8e, 0x53, 0x1e, 0x8f, 0x67, 0x74, 0x02, 0x34, 0xec, 0x4c, 0x19, 0x08, 0x30, 0xab, 0xc5,
	0xbc, 0xe9, 0x7e, 0xc9, 0x05, 0x90, 0xa6, 0x40, 0xd5, 0x53, 0x7e, 0xd8, 0x3c, 0x8d, 0x21, 0x86,
	0xa2, 0xc4, 0xb2, 0x2a, 0xa7, 0xe7, 0xab, 0xbf, 0xa8, 0x76, 0xcf, 0xe3, 0x11, 0xf5, 0x80, 0x86,
	0xe6, 0x05, 0xaa, 0x8a, 0x6c, 0x4c, 0xa8, 0xa5, 0xbb, 0x7a, 0xab, 0x7e, 0x83, 0x3a, 0x8a, 0x30,
	0xcc, 0xbc, 0xca, 0x22, 0x77, 0xb4, 0x41, 0x45, 0x64, 0x7d, 0x6a, 0x0e, 0x51, 0x83, 0x42, 0x18,
	0x8d, 0xfd, 0x30, 0x64, 0x11, 0xe7, 0xd6, 0x1f, 0x57, 0x6f, 0x35, 0xbc, 0xee, 0x36, 0x77, 0xda,
	0x31, 0x11, 0xc9, 0x6c, 0x22, 0x73, 0x38, 0x00, 0x9e, 0x02, 0x57, 0x4f, 0x9b, 0x87, 0xcf, 0xa5,
	0x42, 0xa7, 0x17, 0x04, 0xbd, 0x32, 0x38, 0xa8, 0x4b, 0x8c, 0x6a, 0xcc, 0x47, 0xd4, 0x90, 0x5e,
	0x7b, 0x6a, 0xd5, 0xd5, 0x5b, 0x35, 0xef, 0x7a, 0x9b, 0x3b, 0x57, 0x31, 0x11, 0x2f, 0x7e, 0x49,
	0x3d, 0x58, 0x48, 0x02, 0x4c, 0xe6, 0x77, 0x9a, 0x7b, 0xa8, 0xa4, 0xec, 0xa0, 0x77, 0xc8, 0xf0,
	0x53, 0x98, 0x51, 0x61, 0x19, 0x05, 0x0e, 0x4b, 0x8d, 0xf7, 0xdc, 0xb9, 0xfc, 0xc5, 0x8f, 0x8e,
	0x08, 0x15, 0x03, 0x15, 0x37, 0xfb, 0xc8, 0xe0, 0x24, 0xa6, 0x11, 0xb3, 0xfe, 0x1d, 0x6b, 0xab,
	0x00, 0x66, 0x84, 0xce, 0x0a, 0xd1, 0x29, 0x83, 0x39, 0x09, 0x23, 0xb6, 0x37, 0xfe, 0x7f, 0x2c,
	0xf9, 0x44, 0xf2, 0x1e, 0x14, 0x4e, 0x0d, 0xbd, 0xfe, 0x62, 0x6d, 0xeb, 0xcb, 0xb5, 0xad, 0x7f,
	0xac, 0x6d, 0xfd, 0x6d, 0x63, 0x6b, 0xcb, 0x8d, 0xad, 0xad, 0x36, 0xb6, 0xf6, 0x84, 0x7f, 0xde,
	0xe7, 0xb7, 0xab, 0x9b, 0x18, 0xc5, 0xb1, 0xdc, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xf2,
	0x3c, 0xf2, 0x9e, 0x02, 0x00, 0x00,
}

func (m *MsgUnBond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnBond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnBond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondProviderAddress) > 0 {
		i -= len(m.BondProviderAddress)
		copy(dAtA[i:], m.BondProviderAddress)
		i = encodeVarintMsgUnbond(dAtA, i, uint64(len(m.BondProviderAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgUnbond(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgUnbond(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.BondAddress) > 0 {
		i -= len(m.BondAddress)
		copy(dAtA[i:], m.BondAddress)
		i = encodeVarintMsgUnbond(dAtA, i, uint64(len(m.BondAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintMsgUnbond(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.TxIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgUnbond(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMsgUnbond(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgUnbond(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUnBond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxIn.Size()
	n += 1 + l + sovMsgUnbond(uint64(l))
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovMsgUnbond(uint64(l))
	}
	l = len(m.BondAddress)
	if l > 0 {
		n += 1 + l + sovMsgUnbond(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgUnbond(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgUnbond(uint64(l))
	}
	l = len(m.BondProviderAddress)
	if l > 0 {
		n += 1 + l + sovMsgUnbond(uint64(l))
	}
	return n
}

func sovMsgUnbond(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgUnbond(x uint64) (n int) {
	return sovMsgUnbond(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUnBond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgUnbond
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnBond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnBond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgUnbond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgUnbond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = append(m.NodeAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeAddress == nil {
				m.NodeAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgUnbond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondAddress = gitlab_com_thorchain_thornode_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgUnbond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgUnbond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondProviderAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgUnbond
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondProviderAddress = append(m.BondProviderAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.BondProviderAddress == nil {
				m.BondProviderAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgUnbond(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgUnbond
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgUnbond(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgUnbond
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgUnbond
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgUnbond
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgUnbond
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgUnbond
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgUnbond
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgUnbond        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgUnbond          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgUnbond = fmt.Errorf("proto: unexpected end of group")
)
