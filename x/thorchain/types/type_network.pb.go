// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/types/type_network.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Network struct {
	BondRewardRune          github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=bond_reward_rune,json=bondRewardRune,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"bond_reward_rune"`
	TotalBondUnits          github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=total_bond_units,json=totalBondUnits,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"total_bond_units"`
	BurnedBep2Rune          github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=burned_bep2_rune,json=burnedBep2Rune,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"burned_bep2_rune"`
	BurnedErc20Rune         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=burned_erc20_rune,json=burnedErc20Rune,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"burned_erc20_rune"`
	LPIncomeSplit           int64                                   `protobuf:"varint,5,opt,name=LPIncomeSplit,proto3" json:"LPIncomeSplit,omitempty"`
	NodeIncomeSplit         int64                                   `protobuf:"varint,6,opt,name=NodeIncomeSplit,proto3" json:"NodeIncomeSplit,omitempty"`
	OutboundGasSpentRune    uint64                                  `protobuf:"varint,7,opt,name=outbound_gas_spent_rune,json=outboundGasSpentRune,proto3" json:"outbound_gas_spent_rune,omitempty"`
	OutboundGasWithheldRune uint64                                  `protobuf:"varint,8,opt,name=outbound_gas_withheld_rune,json=outboundGasWithheldRune,proto3" json:"outbound_gas_withheld_rune,omitempty"`
}

func (m *Network) Reset()         { *m = Network{} }
func (m *Network) String() string { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()    {}
func (*Network) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b371247548eec74, []int{0}
}
func (m *Network) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Network) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Network.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Network) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Network.Merge(m, src)
}
func (m *Network) XXX_Size() int {
	return m.Size()
}
func (m *Network) XXX_DiscardUnknown() {
	xxx_messageInfo_Network.DiscardUnknown(m)
}

var xxx_messageInfo_Network proto.InternalMessageInfo

func (m *Network) GetLPIncomeSplit() int64 {
	if m != nil {
		return m.LPIncomeSplit
	}
	return 0
}

func (m *Network) GetNodeIncomeSplit() int64 {
	if m != nil {
		return m.NodeIncomeSplit
	}
	return 0
}

func (m *Network) GetOutboundGasSpentRune() uint64 {
	if m != nil {
		return m.OutboundGasSpentRune
	}
	return 0
}

func (m *Network) GetOutboundGasWithheldRune() uint64 {
	if m != nil {
		return m.OutboundGasWithheldRune
	}
	return 0
}

func init() {
	proto.RegisterType((*Network)(nil), "types.Network")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/types/type_network.proto", fileDescriptor_2b371247548eec74)
}

var fileDescriptor_2b371247548eec74 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x6b, 0xdb, 0x30,
	0x18, 0xc6, 0xed, 0xe5, 0xdf, 0x26, 0xd8, 0xb2, 0x99, 0x40, 0x42, 0x0e, 0x4e, 0x18, 0x83, 0xf9,
	0xb2, 0x78, 0xc9, 0xd8, 0x69, 0x37, 0xc3, 0x28, 0x81, 0x12, 0x8a, 0x43, 0x28, 0x6d, 0x0f, 0xc6,
	0xb6, 0x84, 0x6d, 0xe2, 0xe8, 0x35, 0x92, 0xdc, 0xb4, 0xdf, 0xa2, 0xdf, 0xa7, 0x5f, 0x20, 0xc7,
	0x1c, 0x4b, 0x0f, 0xa1, 0x24, 0x5f, 0xa4, 0x58, 0x72, 0x69, 0xd2, 0xde, 0x72, 0xb1, 0xa5, 0xf7,
	0x79, 0x9f, 0x9f, 0x1e, 0xa4, 0x17, 0x0d, 0x45, 0x0c, 0x2c, 0x8c, 0xfd, 0x84, 0xda, 0xd7, 0x43,
	0xfb, 0xc6, 0x7e, 0xdd, 0x8a, 0xdb, 0x8c, 0x70, 0xf9, 0xf5, 0x28, 0x11, 0x4b, 0x60, 0xf3, 0x41,
	0xc6, 0x40, 0x80, 0x51, 0x93, 0x4a, 0xb7, 0x15, 0x41, 0x04, 0xb2, 0x62, 0x17, 0x2b, 0x25, 0x7e,
	0xbf, 0xaf, 0xa2, 0xc6, 0x44, 0xb5, 0x1b, 0x17, 0xe8, 0x6b, 0x00, 0x14, 0x7b, 0x8c, 0x2c, 0x7d,
	0x86, 0x3d, 0x96, 0x53, 0xd2, 0xd1, 0xfb, 0xba, 0xf5, 0xc9, 0xb1, 0x57, 0x9b, 0x9e, 0xf6, 0xb8,
	0xe9, 0xfd, 0x8c, 0x12, 0x11, 0xe7, 0xc1, 0x20, 0x84, 0x85, 0x1d, 0x02, 0x5f, 0x00, 0x2f, 0x7f,
	0xbf, 0x38, 0x9e, 0xab, 0x04, 0x83, 0x59, 0x42, 0x85, 0xfb, 0xa5, 0x00, 0xb9, 0x92, 0xe3, 0xe6,
	0x94, 0x14, 0x68, 0x01, 0xc2, 0x4f, 0x3d, 0x79, 0x40, 0x4e, 0x13, 0xc1, 0x3b, 0x1f, 0x8e, 0x44,
	0x4b, 0x90, 0x03, 0x14, 0xcf, 0x0a, 0x8c, 0x4c, 0x9d, 0x33, 0x4a, 0xb0, 0x17, 0x90, 0x6c, 0xa4,
	0x52, 0x57, 0x8e, 0x4d, 0x2d, 0x41, 0x0e, 0xc9, 0x46, 0x32, 0xf5, 0x15, 0xfa, 0x56, 0xa2, 0x09,
	0x0b, 0x47, 0xbf, 0x15, 0xbb, 0x7a, 0x1c, 0xbb, 0xa9, 0x48, 0xff, 0x0b, 0x90, 0x84, 0xff, 0x40,
	0x9f, 0x4f, 0xcf, 0xc6, 0x34, 0x84, 0x05, 0x99, 0x66, 0x69, 0x22, 0x3a, 0xb5, 0xbe, 0x6e, 0x55,
	0xdc, 0xc3, 0xa2, 0x61, 0xa1, 0xe6, 0x04, 0x30, 0xd9, 0xef, 0xab, 0xcb, 0xbe, 0xb7, 0x65, 0xe3,
	0x2f, 0x6a, 0x43, 0x2e, 0x02, 0xc8, 0x29, 0xf6, 0x22, 0x9f, 0x7b, 0x3c, 0x23, 0x54, 0xa8, 0xc8,
	0x8d, 0xbe, 0x6e, 0x55, 0xdd, 0xd6, 0x8b, 0x7c, 0xe2, 0xf3, 0x69, 0x21, 0xca, 0x18, 0xff, 0x50,
	0xf7, 0xc0, 0xb6, 0x4c, 0x44, 0x1c, 0x93, 0xb4, 0x7c, 0xfe, 0x8f, 0xd2, 0xd9, 0xde, 0x73, 0x9e,
	0x97, 0x7a, 0x61, 0x76, 0xc6, 0xab, 0xad, 0xa9, 0xaf, 0xb7, 0xa6, 0xfe, 0xb4, 0x35, 0xf5, 0xbb,
	0x9d, 0xa9, 0xad, 0x77, 0xa6, 0xf6, 0xb0, 0x33, 0xb5, 0x4b, 0x3b, 0x4a, 0x44, 0xea, 0xab, 0x7b,
	0xd9, 0x9b, 0xd1, 0x18, 0x18, 0x05, 0x4c, 0xde, 0x0f, 0x6e, 0x50, 0x97, 0xf3, 0xf8, 0xe7, 0x39,
	0x00, 0x00, 0xff, 0xff, 0xae, 0x6d, 0x7d, 0x16, 0xe1, 0x02, 0x00, 0x00,
}

func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Network) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundGasWithheldRune != 0 {
		i = encodeVarintTypeNetwork(dAtA, i, uint64(m.OutboundGasWithheldRune))
		i--
		dAtA[i] = 0x40
	}
	if m.OutboundGasSpentRune != 0 {
		i = encodeVarintTypeNetwork(dAtA, i, uint64(m.OutboundGasSpentRune))
		i--
		dAtA[i] = 0x38
	}
	if m.NodeIncomeSplit != 0 {
		i = encodeVarintTypeNetwork(dAtA, i, uint64(m.NodeIncomeSplit))
		i--
		dAtA[i] = 0x30
	}
	if m.LPIncomeSplit != 0 {
		i = encodeVarintTypeNetwork(dAtA, i, uint64(m.LPIncomeSplit))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.BurnedErc20Rune.Size()
		i -= size
		if _, err := m.BurnedErc20Rune.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeNetwork(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BurnedBep2Rune.Size()
		i -= size
		if _, err := m.BurnedBep2Rune.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeNetwork(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalBondUnits.Size()
		i -= size
		if _, err := m.TotalBondUnits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeNetwork(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.BondRewardRune.Size()
		i -= size
		if _, err := m.BondRewardRune.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeNetwork(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypeNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BondRewardRune.Size()
	n += 1 + l + sovTypeNetwork(uint64(l))
	l = m.TotalBondUnits.Size()
	n += 1 + l + sovTypeNetwork(uint64(l))
	l = m.BurnedBep2Rune.Size()
	n += 1 + l + sovTypeNetwork(uint64(l))
	l = m.BurnedErc20Rune.Size()
	n += 1 + l + sovTypeNetwork(uint64(l))
	if m.LPIncomeSplit != 0 {
		n += 1 + sovTypeNetwork(uint64(m.LPIncomeSplit))
	}
	if m.NodeIncomeSplit != 0 {
		n += 1 + sovTypeNetwork(uint64(m.NodeIncomeSplit))
	}
	if m.OutboundGasSpentRune != 0 {
		n += 1 + sovTypeNetwork(uint64(m.OutboundGasSpentRune))
	}
	if m.OutboundGasWithheldRune != 0 {
		n += 1 + sovTypeNetwork(uint64(m.OutboundGasWithheldRune))
	}
	return n
}

func sovTypeNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeNetwork(x uint64) (n int) {
	return sovTypeNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondRewardRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondRewardRune.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBondUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBondUnits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnedBep2Rune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnedBep2Rune.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnedErc20Rune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnedErc20Rune.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LPIncomeSplit", wireType)
			}
			m.LPIncomeSplit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LPIncomeSplit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIncomeSplit", wireType)
			}
			m.NodeIncomeSplit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeIncomeSplit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundGasSpentRune", wireType)
			}
			m.OutboundGasSpentRune = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundGasSpentRune |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundGasWithheldRune", wireType)
			}
			m.OutboundGasWithheldRune = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundGasWithheldRune |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypeNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypeNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypeNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeNetwork = fmt.Errorf("proto: unexpected end of group")
)
