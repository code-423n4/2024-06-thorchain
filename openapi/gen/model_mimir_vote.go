/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MimirVote struct for MimirVote
type MimirVote struct {
	Key *string `json:"key,omitempty"`
	Value *int64 `json:"value,omitempty"`
	Signer *string `json:"signer,omitempty"`
}

// NewMimirVote instantiates a new MimirVote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMimirVote() *MimirVote {
	this := MimirVote{}
	return &this
}

// NewMimirVoteWithDefaults instantiates a new MimirVote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMimirVoteWithDefaults() *MimirVote {
	this := MimirVote{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MimirVote) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirVote) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MimirVote) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MimirVote) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MimirVote) GetValue() int64 {
	if o == nil || o.Value == nil {
		var ret int64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirVote) GetValueOk() (*int64, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MimirVote) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int64 and assigns it to the Value field.
func (o *MimirVote) SetValue(v int64) {
	o.Value = &v
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *MimirVote) GetSigner() string {
	if o == nil || o.Signer == nil {
		var ret string
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirVote) GetSignerOk() (*string, bool) {
	if o == nil || o.Signer == nil {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *MimirVote) HasSigner() bool {
	if o != nil && o.Signer != nil {
		return true
	}

	return false
}

// SetSigner gets a reference to the given string and assigns it to the Signer field.
func (o *MimirVote) SetSigner(v string) {
	o.Signer = &v
}

func (o MimirVote) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Signer != nil {
		toSerialize["signer"] = o.Signer
	}
	return json.Marshal(toSerialize)
}

type NullableMimirVote struct {
	value *MimirVote
	isSet bool
}

func (v NullableMimirVote) Get() *MimirVote {
	return v.value
}

func (v *NullableMimirVote) Set(val *MimirVote) {
	v.value = val
	v.isSet = true
}

func (v NullableMimirVote) IsSet() bool {
	return v.isSet
}

func (v *NullableMimirVote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMimirVote(val *MimirVote) *NullableMimirVote {
	return &NullableMimirVote{value: val, isSet: true}
}

func (v NullableMimirVote) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMimirVote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


