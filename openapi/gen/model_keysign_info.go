/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KeysignInfo struct for KeysignInfo
type KeysignInfo struct {
	// the block(s) in which a tx out item is scheduled to be signed and moved from the scheduled outbound queue to the outbound queue
	Height *int64 `json:"height,omitempty"`
	TxArray []TxOutItem `json:"tx_array"`
}

// NewKeysignInfo instantiates a new KeysignInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeysignInfo(txArray []TxOutItem) *KeysignInfo {
	this := KeysignInfo{}
	this.TxArray = txArray
	return &this
}

// NewKeysignInfoWithDefaults instantiates a new KeysignInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeysignInfoWithDefaults() *KeysignInfo {
	this := KeysignInfo{}
	return &this
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *KeysignInfo) GetHeight() int64 {
	if o == nil || o.Height == nil {
		var ret int64
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysignInfo) GetHeightOk() (*int64, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *KeysignInfo) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int64 and assigns it to the Height field.
func (o *KeysignInfo) SetHeight(v int64) {
	o.Height = &v
}

// GetTxArray returns the TxArray field value
func (o *KeysignInfo) GetTxArray() []TxOutItem {
	if o == nil {
		var ret []TxOutItem
		return ret
	}

	return o.TxArray
}

// GetTxArrayOk returns a tuple with the TxArray field value
// and a boolean to check if the value has been set.
func (o *KeysignInfo) GetTxArrayOk() ([]TxOutItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxArray, true
}

// SetTxArray sets field value
func (o *KeysignInfo) SetTxArray(v []TxOutItem) {
	o.TxArray = v
}

func (o KeysignInfo) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	if true {
		toSerialize["tx_array"] = o.TxArray
	}
	return json.Marshal(toSerialize)
}

type NullableKeysignInfo struct {
	value *KeysignInfo
	isSet bool
}

func (v NullableKeysignInfo) Get() *KeysignInfo {
	return v.value
}

func (v *NullableKeysignInfo) Set(val *KeysignInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableKeysignInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableKeysignInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeysignInfo(val *KeysignInfo) *NullableKeysignInfo {
	return &NullableKeysignInfo{value: val, isSet: true}
}

func (v NullableKeysignInfo) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeysignInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


