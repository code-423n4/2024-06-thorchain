/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MsgSwap struct for MsgSwap
type MsgSwap struct {
	Tx Tx `json:"tx"`
	// the asset to be swapped to
	TargetAsset string `json:"target_asset"`
	// the destination address to receive the swap output
	Destination *string `json:"destination,omitempty"`
	// the minimum amount of output asset to receive (else cancelling and refunding the swap)
	TradeTarget string `json:"trade_target"`
	// the affiliate address which will receive any affiliate fee
	AffiliateAddress *string `json:"affiliate_address,omitempty"`
	// the affiliate fee in basis points
	AffiliateBasisPoints string `json:"affiliate_basis_points"`
	// the signer (sender) of the transaction
	Signer *string `json:"signer,omitempty"`
	// the contract address if an aggregator is specified for a non-THORChain SwapOut
	Aggregator *string `json:"aggregator,omitempty"`
	// the desired output asset of the aggregator SwapOut
	AggregatorTargetAddress *string `json:"aggregator_target_address,omitempty"`
	// the minimum amount of SwapOut asset to receive (else cancelling the SwapOut and receiving THORChain's output)
	AggregatorTargetLimit *string `json:"aggregator_target_limit,omitempty"`
	// market if immediately completed or refunded, limit if held until fulfillable
	OrderType *string `json:"order_type,omitempty"`
	// number of swaps to execute in a streaming swap
	StreamQuantity *int64 `json:"stream_quantity,omitempty"`
	// the interval (in blocks) to execute the streaming swap
	StreamInterval *int64 `json:"stream_interval,omitempty"`
}

// NewMsgSwap instantiates a new MsgSwap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsgSwap(tx Tx, targetAsset string, tradeTarget string, affiliateBasisPoints string) *MsgSwap {
	this := MsgSwap{}
	this.Tx = tx
	this.TargetAsset = targetAsset
	this.TradeTarget = tradeTarget
	this.AffiliateBasisPoints = affiliateBasisPoints
	return &this
}

// NewMsgSwapWithDefaults instantiates a new MsgSwap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMsgSwapWithDefaults() *MsgSwap {
	this := MsgSwap{}
	return &this
}

// GetTx returns the Tx field value
func (o *MsgSwap) GetTx() Tx {
	if o == nil {
		var ret Tx
		return ret
	}

	return o.Tx
}

// GetTxOk returns a tuple with the Tx field value
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetTxOk() (*Tx, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tx, true
}

// SetTx sets field value
func (o *MsgSwap) SetTx(v Tx) {
	o.Tx = v
}

// GetTargetAsset returns the TargetAsset field value
func (o *MsgSwap) GetTargetAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetAsset
}

// GetTargetAssetOk returns a tuple with the TargetAsset field value
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetTargetAssetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetAsset, true
}

// SetTargetAsset sets field value
func (o *MsgSwap) SetTargetAsset(v string) {
	o.TargetAsset = v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *MsgSwap) GetDestination() string {
	if o == nil || o.Destination == nil {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetDestinationOk() (*string, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *MsgSwap) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *MsgSwap) SetDestination(v string) {
	o.Destination = &v
}

// GetTradeTarget returns the TradeTarget field value
func (o *MsgSwap) GetTradeTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TradeTarget
}

// GetTradeTargetOk returns a tuple with the TradeTarget field value
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetTradeTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TradeTarget, true
}

// SetTradeTarget sets field value
func (o *MsgSwap) SetTradeTarget(v string) {
	o.TradeTarget = v
}

// GetAffiliateAddress returns the AffiliateAddress field value if set, zero value otherwise.
func (o *MsgSwap) GetAffiliateAddress() string {
	if o == nil || o.AffiliateAddress == nil {
		var ret string
		return ret
	}
	return *o.AffiliateAddress
}

// GetAffiliateAddressOk returns a tuple with the AffiliateAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetAffiliateAddressOk() (*string, bool) {
	if o == nil || o.AffiliateAddress == nil {
		return nil, false
	}
	return o.AffiliateAddress, true
}

// HasAffiliateAddress returns a boolean if a field has been set.
func (o *MsgSwap) HasAffiliateAddress() bool {
	if o != nil && o.AffiliateAddress != nil {
		return true
	}

	return false
}

// SetAffiliateAddress gets a reference to the given string and assigns it to the AffiliateAddress field.
func (o *MsgSwap) SetAffiliateAddress(v string) {
	o.AffiliateAddress = &v
}

// GetAffiliateBasisPoints returns the AffiliateBasisPoints field value
func (o *MsgSwap) GetAffiliateBasisPoints() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AffiliateBasisPoints
}

// GetAffiliateBasisPointsOk returns a tuple with the AffiliateBasisPoints field value
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetAffiliateBasisPointsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AffiliateBasisPoints, true
}

// SetAffiliateBasisPoints sets field value
func (o *MsgSwap) SetAffiliateBasisPoints(v string) {
	o.AffiliateBasisPoints = v
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *MsgSwap) GetSigner() string {
	if o == nil || o.Signer == nil {
		var ret string
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetSignerOk() (*string, bool) {
	if o == nil || o.Signer == nil {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *MsgSwap) HasSigner() bool {
	if o != nil && o.Signer != nil {
		return true
	}

	return false
}

// SetSigner gets a reference to the given string and assigns it to the Signer field.
func (o *MsgSwap) SetSigner(v string) {
	o.Signer = &v
}

// GetAggregator returns the Aggregator field value if set, zero value otherwise.
func (o *MsgSwap) GetAggregator() string {
	if o == nil || o.Aggregator == nil {
		var ret string
		return ret
	}
	return *o.Aggregator
}

// GetAggregatorOk returns a tuple with the Aggregator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetAggregatorOk() (*string, bool) {
	if o == nil || o.Aggregator == nil {
		return nil, false
	}
	return o.Aggregator, true
}

// HasAggregator returns a boolean if a field has been set.
func (o *MsgSwap) HasAggregator() bool {
	if o != nil && o.Aggregator != nil {
		return true
	}

	return false
}

// SetAggregator gets a reference to the given string and assigns it to the Aggregator field.
func (o *MsgSwap) SetAggregator(v string) {
	o.Aggregator = &v
}

// GetAggregatorTargetAddress returns the AggregatorTargetAddress field value if set, zero value otherwise.
func (o *MsgSwap) GetAggregatorTargetAddress() string {
	if o == nil || o.AggregatorTargetAddress == nil {
		var ret string
		return ret
	}
	return *o.AggregatorTargetAddress
}

// GetAggregatorTargetAddressOk returns a tuple with the AggregatorTargetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetAggregatorTargetAddressOk() (*string, bool) {
	if o == nil || o.AggregatorTargetAddress == nil {
		return nil, false
	}
	return o.AggregatorTargetAddress, true
}

// HasAggregatorTargetAddress returns a boolean if a field has been set.
func (o *MsgSwap) HasAggregatorTargetAddress() bool {
	if o != nil && o.AggregatorTargetAddress != nil {
		return true
	}

	return false
}

// SetAggregatorTargetAddress gets a reference to the given string and assigns it to the AggregatorTargetAddress field.
func (o *MsgSwap) SetAggregatorTargetAddress(v string) {
	o.AggregatorTargetAddress = &v
}

// GetAggregatorTargetLimit returns the AggregatorTargetLimit field value if set, zero value otherwise.
func (o *MsgSwap) GetAggregatorTargetLimit() string {
	if o == nil || o.AggregatorTargetLimit == nil {
		var ret string
		return ret
	}
	return *o.AggregatorTargetLimit
}

// GetAggregatorTargetLimitOk returns a tuple with the AggregatorTargetLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetAggregatorTargetLimitOk() (*string, bool) {
	if o == nil || o.AggregatorTargetLimit == nil {
		return nil, false
	}
	return o.AggregatorTargetLimit, true
}

// HasAggregatorTargetLimit returns a boolean if a field has been set.
func (o *MsgSwap) HasAggregatorTargetLimit() bool {
	if o != nil && o.AggregatorTargetLimit != nil {
		return true
	}

	return false
}

// SetAggregatorTargetLimit gets a reference to the given string and assigns it to the AggregatorTargetLimit field.
func (o *MsgSwap) SetAggregatorTargetLimit(v string) {
	o.AggregatorTargetLimit = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *MsgSwap) GetOrderType() string {
	if o == nil || o.OrderType == nil {
		var ret string
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetOrderTypeOk() (*string, bool) {
	if o == nil || o.OrderType == nil {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *MsgSwap) HasOrderType() bool {
	if o != nil && o.OrderType != nil {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given string and assigns it to the OrderType field.
func (o *MsgSwap) SetOrderType(v string) {
	o.OrderType = &v
}

// GetStreamQuantity returns the StreamQuantity field value if set, zero value otherwise.
func (o *MsgSwap) GetStreamQuantity() int64 {
	if o == nil || o.StreamQuantity == nil {
		var ret int64
		return ret
	}
	return *o.StreamQuantity
}

// GetStreamQuantityOk returns a tuple with the StreamQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetStreamQuantityOk() (*int64, bool) {
	if o == nil || o.StreamQuantity == nil {
		return nil, false
	}
	return o.StreamQuantity, true
}

// HasStreamQuantity returns a boolean if a field has been set.
func (o *MsgSwap) HasStreamQuantity() bool {
	if o != nil && o.StreamQuantity != nil {
		return true
	}

	return false
}

// SetStreamQuantity gets a reference to the given int64 and assigns it to the StreamQuantity field.
func (o *MsgSwap) SetStreamQuantity(v int64) {
	o.StreamQuantity = &v
}

// GetStreamInterval returns the StreamInterval field value if set, zero value otherwise.
func (o *MsgSwap) GetStreamInterval() int64 {
	if o == nil || o.StreamInterval == nil {
		var ret int64
		return ret
	}
	return *o.StreamInterval
}

// GetStreamIntervalOk returns a tuple with the StreamInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MsgSwap) GetStreamIntervalOk() (*int64, bool) {
	if o == nil || o.StreamInterval == nil {
		return nil, false
	}
	return o.StreamInterval, true
}

// HasStreamInterval returns a boolean if a field has been set.
func (o *MsgSwap) HasStreamInterval() bool {
	if o != nil && o.StreamInterval != nil {
		return true
	}

	return false
}

// SetStreamInterval gets a reference to the given int64 and assigns it to the StreamInterval field.
func (o *MsgSwap) SetStreamInterval(v int64) {
	o.StreamInterval = &v
}

func (o MsgSwap) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tx"] = o.Tx
	}
	if true {
		toSerialize["target_asset"] = o.TargetAsset
	}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if true {
		toSerialize["trade_target"] = o.TradeTarget
	}
	if o.AffiliateAddress != nil {
		toSerialize["affiliate_address"] = o.AffiliateAddress
	}
	if true {
		toSerialize["affiliate_basis_points"] = o.AffiliateBasisPoints
	}
	if o.Signer != nil {
		toSerialize["signer"] = o.Signer
	}
	if o.Aggregator != nil {
		toSerialize["aggregator"] = o.Aggregator
	}
	if o.AggregatorTargetAddress != nil {
		toSerialize["aggregator_target_address"] = o.AggregatorTargetAddress
	}
	if o.AggregatorTargetLimit != nil {
		toSerialize["aggregator_target_limit"] = o.AggregatorTargetLimit
	}
	if o.OrderType != nil {
		toSerialize["order_type"] = o.OrderType
	}
	if o.StreamQuantity != nil {
		toSerialize["stream_quantity"] = o.StreamQuantity
	}
	if o.StreamInterval != nil {
		toSerialize["stream_interval"] = o.StreamInterval
	}
	return json.Marshal(toSerialize)
}

type NullableMsgSwap struct {
	value *MsgSwap
	isSet bool
}

func (v NullableMsgSwap) Get() *MsgSwap {
	return v.value
}

func (v *NullableMsgSwap) Set(val *MsgSwap) {
	v.value = val
	v.isSet = true
}

func (v NullableMsgSwap) IsSet() bool {
	return v.isSet
}

func (v *NullableMsgSwap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsgSwap(val *MsgSwap) *NullableMsgSwap {
	return &NullableMsgSwap{value: val, isSet: true}
}

func (v NullableMsgSwap) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsgSwap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


