/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StreamingSwap struct for StreamingSwap
type StreamingSwap struct {
	// the hash of a transaction
	TxId *string `json:"tx_id,omitempty"`
	// how often each swap is made, in blocks
	Interval *int64 `json:"interval,omitempty"`
	// the total number of swaps in a streaming swaps
	Quantity *int64 `json:"quantity,omitempty"`
	// the amount of swap attempts so far
	Count *int64 `json:"count,omitempty"`
	// the block height of the latest swap
	LastHeight *int64 `json:"last_height,omitempty"`
	// the total number of tokens the swapper wants to receive of the output asset
	TradeTarget string `json:"trade_target"`
	// the asset to be swapped from
	SourceAsset *string `json:"source_asset,omitempty"`
	// the asset to be swapped to
	TargetAsset *string `json:"target_asset,omitempty"`
	// the destination address to receive the swap output
	Destination *string `json:"destination,omitempty"`
	// the number of input tokens the swapper has deposited
	Deposit string `json:"deposit"`
	// the amount of input tokens that have been swapped so far
	In string `json:"in"`
	// the amount of output tokens that have been swapped so far
	Out string `json:"out"`
	// the list of swap indexes that failed
	FailedSwaps []int64 `json:"failed_swaps,omitempty"`
	// the list of reasons that sub-swaps have failed
	FailedSwapReasons []string `json:"failed_swap_reasons,omitempty"`
}

// NewStreamingSwap instantiates a new StreamingSwap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamingSwap(tradeTarget string, deposit string, in string, out string) *StreamingSwap {
	this := StreamingSwap{}
	this.TradeTarget = tradeTarget
	this.Deposit = deposit
	this.In = in
	this.Out = out
	return &this
}

// NewStreamingSwapWithDefaults instantiates a new StreamingSwap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamingSwapWithDefaults() *StreamingSwap {
	this := StreamingSwap{}
	return &this
}

// GetTxId returns the TxId field value if set, zero value otherwise.
func (o *StreamingSwap) GetTxId() string {
	if o == nil || o.TxId == nil {
		var ret string
		return ret
	}
	return *o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetTxIdOk() (*string, bool) {
	if o == nil || o.TxId == nil {
		return nil, false
	}
	return o.TxId, true
}

// HasTxId returns a boolean if a field has been set.
func (o *StreamingSwap) HasTxId() bool {
	if o != nil && o.TxId != nil {
		return true
	}

	return false
}

// SetTxId gets a reference to the given string and assigns it to the TxId field.
func (o *StreamingSwap) SetTxId(v string) {
	o.TxId = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *StreamingSwap) GetInterval() int64 {
	if o == nil || o.Interval == nil {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetIntervalOk() (*int64, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *StreamingSwap) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *StreamingSwap) SetInterval(v int64) {
	o.Interval = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *StreamingSwap) GetQuantity() int64 {
	if o == nil || o.Quantity == nil {
		var ret int64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetQuantityOk() (*int64, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *StreamingSwap) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int64 and assigns it to the Quantity field.
func (o *StreamingSwap) SetQuantity(v int64) {
	o.Quantity = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *StreamingSwap) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *StreamingSwap) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *StreamingSwap) SetCount(v int64) {
	o.Count = &v
}

// GetLastHeight returns the LastHeight field value if set, zero value otherwise.
func (o *StreamingSwap) GetLastHeight() int64 {
	if o == nil || o.LastHeight == nil {
		var ret int64
		return ret
	}
	return *o.LastHeight
}

// GetLastHeightOk returns a tuple with the LastHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetLastHeightOk() (*int64, bool) {
	if o == nil || o.LastHeight == nil {
		return nil, false
	}
	return o.LastHeight, true
}

// HasLastHeight returns a boolean if a field has been set.
func (o *StreamingSwap) HasLastHeight() bool {
	if o != nil && o.LastHeight != nil {
		return true
	}

	return false
}

// SetLastHeight gets a reference to the given int64 and assigns it to the LastHeight field.
func (o *StreamingSwap) SetLastHeight(v int64) {
	o.LastHeight = &v
}

// GetTradeTarget returns the TradeTarget field value
func (o *StreamingSwap) GetTradeTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TradeTarget
}

// GetTradeTargetOk returns a tuple with the TradeTarget field value
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetTradeTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TradeTarget, true
}

// SetTradeTarget sets field value
func (o *StreamingSwap) SetTradeTarget(v string) {
	o.TradeTarget = v
}

// GetSourceAsset returns the SourceAsset field value if set, zero value otherwise.
func (o *StreamingSwap) GetSourceAsset() string {
	if o == nil || o.SourceAsset == nil {
		var ret string
		return ret
	}
	return *o.SourceAsset
}

// GetSourceAssetOk returns a tuple with the SourceAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetSourceAssetOk() (*string, bool) {
	if o == nil || o.SourceAsset == nil {
		return nil, false
	}
	return o.SourceAsset, true
}

// HasSourceAsset returns a boolean if a field has been set.
func (o *StreamingSwap) HasSourceAsset() bool {
	if o != nil && o.SourceAsset != nil {
		return true
	}

	return false
}

// SetSourceAsset gets a reference to the given string and assigns it to the SourceAsset field.
func (o *StreamingSwap) SetSourceAsset(v string) {
	o.SourceAsset = &v
}

// GetTargetAsset returns the TargetAsset field value if set, zero value otherwise.
func (o *StreamingSwap) GetTargetAsset() string {
	if o == nil || o.TargetAsset == nil {
		var ret string
		return ret
	}
	return *o.TargetAsset
}

// GetTargetAssetOk returns a tuple with the TargetAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetTargetAssetOk() (*string, bool) {
	if o == nil || o.TargetAsset == nil {
		return nil, false
	}
	return o.TargetAsset, true
}

// HasTargetAsset returns a boolean if a field has been set.
func (o *StreamingSwap) HasTargetAsset() bool {
	if o != nil && o.TargetAsset != nil {
		return true
	}

	return false
}

// SetTargetAsset gets a reference to the given string and assigns it to the TargetAsset field.
func (o *StreamingSwap) SetTargetAsset(v string) {
	o.TargetAsset = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *StreamingSwap) GetDestination() string {
	if o == nil || o.Destination == nil {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetDestinationOk() (*string, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *StreamingSwap) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *StreamingSwap) SetDestination(v string) {
	o.Destination = &v
}

// GetDeposit returns the Deposit field value
func (o *StreamingSwap) GetDeposit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Deposit
}

// GetDepositOk returns a tuple with the Deposit field value
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetDepositOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deposit, true
}

// SetDeposit sets field value
func (o *StreamingSwap) SetDeposit(v string) {
	o.Deposit = v
}

// GetIn returns the In field value
func (o *StreamingSwap) GetIn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.In
}

// GetInOk returns a tuple with the In field value
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetInOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.In, true
}

// SetIn sets field value
func (o *StreamingSwap) SetIn(v string) {
	o.In = v
}

// GetOut returns the Out field value
func (o *StreamingSwap) GetOut() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Out
}

// GetOutOk returns a tuple with the Out field value
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetOutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Out, true
}

// SetOut sets field value
func (o *StreamingSwap) SetOut(v string) {
	o.Out = v
}

// GetFailedSwaps returns the FailedSwaps field value if set, zero value otherwise.
func (o *StreamingSwap) GetFailedSwaps() []int64 {
	if o == nil || o.FailedSwaps == nil {
		var ret []int64
		return ret
	}
	return o.FailedSwaps
}

// GetFailedSwapsOk returns a tuple with the FailedSwaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetFailedSwapsOk() ([]int64, bool) {
	if o == nil || o.FailedSwaps == nil {
		return nil, false
	}
	return o.FailedSwaps, true
}

// HasFailedSwaps returns a boolean if a field has been set.
func (o *StreamingSwap) HasFailedSwaps() bool {
	if o != nil && o.FailedSwaps != nil {
		return true
	}

	return false
}

// SetFailedSwaps gets a reference to the given []int64 and assigns it to the FailedSwaps field.
func (o *StreamingSwap) SetFailedSwaps(v []int64) {
	o.FailedSwaps = v
}

// GetFailedSwapReasons returns the FailedSwapReasons field value if set, zero value otherwise.
func (o *StreamingSwap) GetFailedSwapReasons() []string {
	if o == nil || o.FailedSwapReasons == nil {
		var ret []string
		return ret
	}
	return o.FailedSwapReasons
}

// GetFailedSwapReasonsOk returns a tuple with the FailedSwapReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamingSwap) GetFailedSwapReasonsOk() ([]string, bool) {
	if o == nil || o.FailedSwapReasons == nil {
		return nil, false
	}
	return o.FailedSwapReasons, true
}

// HasFailedSwapReasons returns a boolean if a field has been set.
func (o *StreamingSwap) HasFailedSwapReasons() bool {
	if o != nil && o.FailedSwapReasons != nil {
		return true
	}

	return false
}

// SetFailedSwapReasons gets a reference to the given []string and assigns it to the FailedSwapReasons field.
func (o *StreamingSwap) SetFailedSwapReasons(v []string) {
	o.FailedSwapReasons = v
}

func (o StreamingSwap) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TxId != nil {
		toSerialize["tx_id"] = o.TxId
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.LastHeight != nil {
		toSerialize["last_height"] = o.LastHeight
	}
	if true {
		toSerialize["trade_target"] = o.TradeTarget
	}
	if o.SourceAsset != nil {
		toSerialize["source_asset"] = o.SourceAsset
	}
	if o.TargetAsset != nil {
		toSerialize["target_asset"] = o.TargetAsset
	}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if true {
		toSerialize["deposit"] = o.Deposit
	}
	if true {
		toSerialize["in"] = o.In
	}
	if true {
		toSerialize["out"] = o.Out
	}
	if o.FailedSwaps != nil {
		toSerialize["failed_swaps"] = o.FailedSwaps
	}
	if o.FailedSwapReasons != nil {
		toSerialize["failed_swap_reasons"] = o.FailedSwapReasons
	}
	return json.Marshal(toSerialize)
}

type NullableStreamingSwap struct {
	value *StreamingSwap
	isSet bool
}

func (v NullableStreamingSwap) Get() *StreamingSwap {
	return v.value
}

func (v *NullableStreamingSwap) Set(val *StreamingSwap) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamingSwap) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamingSwap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamingSwap(val *StreamingSwap) *NullableStreamingSwap {
	return &NullableStreamingSwap{value: val, isSet: true}
}

func (v NullableStreamingSwap) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamingSwap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


