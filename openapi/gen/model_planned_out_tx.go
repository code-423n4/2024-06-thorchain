/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlannedOutTx struct for PlannedOutTx
type PlannedOutTx struct {
	Chain string `json:"chain"`
	ToAddress string `json:"to_address"`
	Coin Coin `json:"coin"`
	// returns true if the planned transaction has a refund memo
	Refund bool `json:"refund"`
}

// NewPlannedOutTx instantiates a new PlannedOutTx object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlannedOutTx(chain string, toAddress string, coin Coin, refund bool) *PlannedOutTx {
	this := PlannedOutTx{}
	this.Chain = chain
	this.ToAddress = toAddress
	this.Coin = coin
	this.Refund = refund
	return &this
}

// NewPlannedOutTxWithDefaults instantiates a new PlannedOutTx object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlannedOutTxWithDefaults() *PlannedOutTx {
	this := PlannedOutTx{}
	return &this
}

// GetChain returns the Chain field value
func (o *PlannedOutTx) GetChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *PlannedOutTx) GetChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *PlannedOutTx) SetChain(v string) {
	o.Chain = v
}

// GetToAddress returns the ToAddress field value
func (o *PlannedOutTx) GetToAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *PlannedOutTx) GetToAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *PlannedOutTx) SetToAddress(v string) {
	o.ToAddress = v
}

// GetCoin returns the Coin field value
func (o *PlannedOutTx) GetCoin() Coin {
	if o == nil {
		var ret Coin
		return ret
	}

	return o.Coin
}

// GetCoinOk returns a tuple with the Coin field value
// and a boolean to check if the value has been set.
func (o *PlannedOutTx) GetCoinOk() (*Coin, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Coin, true
}

// SetCoin sets field value
func (o *PlannedOutTx) SetCoin(v Coin) {
	o.Coin = v
}

// GetRefund returns the Refund field value
func (o *PlannedOutTx) GetRefund() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Refund
}

// GetRefundOk returns a tuple with the Refund field value
// and a boolean to check if the value has been set.
func (o *PlannedOutTx) GetRefundOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Refund, true
}

// SetRefund sets field value
func (o *PlannedOutTx) SetRefund(v bool) {
	o.Refund = v
}

func (o PlannedOutTx) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["chain"] = o.Chain
	}
	if true {
		toSerialize["to_address"] = o.ToAddress
	}
	if true {
		toSerialize["coin"] = o.Coin
	}
	if true {
		toSerialize["refund"] = o.Refund
	}
	return json.Marshal(toSerialize)
}

type NullablePlannedOutTx struct {
	value *PlannedOutTx
	isSet bool
}

func (v NullablePlannedOutTx) Get() *PlannedOutTx {
	return v.value
}

func (v *NullablePlannedOutTx) Set(val *PlannedOutTx) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedOutTx) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedOutTx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedOutTx(val *PlannedOutTx) *NullablePlannedOutTx {
	return &NullablePlannedOutTx{value: val, isSet: true}
}

func (v NullablePlannedOutTx) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedOutTx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


