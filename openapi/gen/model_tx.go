/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Tx struct for Tx
type Tx struct {
	Id *string `json:"id,omitempty"`
	Chain *string `json:"chain,omitempty"`
	FromAddress *string `json:"from_address,omitempty"`
	ToAddress *string `json:"to_address,omitempty"`
	Coins []Coin `json:"coins"`
	Gas []Coin `json:"gas"`
	Memo *string `json:"memo,omitempty"`
}

// NewTx instantiates a new Tx object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTx(coins []Coin, gas []Coin) *Tx {
	this := Tx{}
	this.Coins = coins
	this.Gas = gas
	return &this
}

// NewTxWithDefaults instantiates a new Tx object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTxWithDefaults() *Tx {
	this := Tx{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Tx) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Tx) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Tx) SetId(v string) {
	o.Id = &v
}

// GetChain returns the Chain field value if set, zero value otherwise.
func (o *Tx) GetChain() string {
	if o == nil || o.Chain == nil {
		var ret string
		return ret
	}
	return *o.Chain
}

// GetChainOk returns a tuple with the Chain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetChainOk() (*string, bool) {
	if o == nil || o.Chain == nil {
		return nil, false
	}
	return o.Chain, true
}

// HasChain returns a boolean if a field has been set.
func (o *Tx) HasChain() bool {
	if o != nil && o.Chain != nil {
		return true
	}

	return false
}

// SetChain gets a reference to the given string and assigns it to the Chain field.
func (o *Tx) SetChain(v string) {
	o.Chain = &v
}

// GetFromAddress returns the FromAddress field value if set, zero value otherwise.
func (o *Tx) GetFromAddress() string {
	if o == nil || o.FromAddress == nil {
		var ret string
		return ret
	}
	return *o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetFromAddressOk() (*string, bool) {
	if o == nil || o.FromAddress == nil {
		return nil, false
	}
	return o.FromAddress, true
}

// HasFromAddress returns a boolean if a field has been set.
func (o *Tx) HasFromAddress() bool {
	if o != nil && o.FromAddress != nil {
		return true
	}

	return false
}

// SetFromAddress gets a reference to the given string and assigns it to the FromAddress field.
func (o *Tx) SetFromAddress(v string) {
	o.FromAddress = &v
}

// GetToAddress returns the ToAddress field value if set, zero value otherwise.
func (o *Tx) GetToAddress() string {
	if o == nil || o.ToAddress == nil {
		var ret string
		return ret
	}
	return *o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetToAddressOk() (*string, bool) {
	if o == nil || o.ToAddress == nil {
		return nil, false
	}
	return o.ToAddress, true
}

// HasToAddress returns a boolean if a field has been set.
func (o *Tx) HasToAddress() bool {
	if o != nil && o.ToAddress != nil {
		return true
	}

	return false
}

// SetToAddress gets a reference to the given string and assigns it to the ToAddress field.
func (o *Tx) SetToAddress(v string) {
	o.ToAddress = &v
}

// GetCoins returns the Coins field value
func (o *Tx) GetCoins() []Coin {
	if o == nil {
		var ret []Coin
		return ret
	}

	return o.Coins
}

// GetCoinsOk returns a tuple with the Coins field value
// and a boolean to check if the value has been set.
func (o *Tx) GetCoinsOk() ([]Coin, bool) {
	if o == nil {
		return nil, false
	}
	return o.Coins, true
}

// SetCoins sets field value
func (o *Tx) SetCoins(v []Coin) {
	o.Coins = v
}

// GetGas returns the Gas field value
func (o *Tx) GetGas() []Coin {
	if o == nil {
		var ret []Coin
		return ret
	}

	return o.Gas
}

// GetGasOk returns a tuple with the Gas field value
// and a boolean to check if the value has been set.
func (o *Tx) GetGasOk() ([]Coin, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gas, true
}

// SetGas sets field value
func (o *Tx) SetGas(v []Coin) {
	o.Gas = v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *Tx) GetMemo() string {
	if o == nil || o.Memo == nil {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tx) GetMemoOk() (*string, bool) {
	if o == nil || o.Memo == nil {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *Tx) HasMemo() bool {
	if o != nil && o.Memo != nil {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *Tx) SetMemo(v string) {
	o.Memo = &v
}

func (o Tx) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Chain != nil {
		toSerialize["chain"] = o.Chain
	}
	if o.FromAddress != nil {
		toSerialize["from_address"] = o.FromAddress
	}
	if o.ToAddress != nil {
		toSerialize["to_address"] = o.ToAddress
	}
	if true {
		toSerialize["coins"] = o.Coins
	}
	if true {
		toSerialize["gas"] = o.Gas
	}
	if o.Memo != nil {
		toSerialize["memo"] = o.Memo
	}
	return json.Marshal(toSerialize)
}

type NullableTx struct {
	value *Tx
	isSet bool
}

func (v NullableTx) Get() *Tx {
	return v.value
}

func (v *NullableTx) Set(val *Tx) {
	v.value = val
	v.isSet = true
}

func (v NullableTx) IsSet() bool {
	return v.isSet
}

func (v *NullableTx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTx(val *Tx) *NullableTx {
	return &NullableTx{value: val, isSet: true}
}

func (v NullableTx) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


