/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ObservedTx struct for ObservedTx
type ObservedTx struct {
	Tx Tx `json:"tx"`
	ObservedPubKey *string `json:"observed_pub_key,omitempty"`
	// the block height on the external source chain when the transaction was observed, not provided if chain is THOR
	ExternalObservedHeight *int64 `json:"external_observed_height,omitempty"`
	// the block height on the external source chain when confirmation counting will be complete, not provided if chain is THOR
	ExternalConfirmationDelayHeight *int64 `json:"external_confirmation_delay_height,omitempty"`
	// the outbound aggregator to use, will also match a suffix
	Aggregator *string `json:"aggregator,omitempty"`
	// the aggregator target asset provided to transferOutAndCall
	AggregatorTarget *string `json:"aggregator_target,omitempty"`
	// the aggregator target asset limit provided to transferOutAndCall
	AggregatorTargetLimit *string `json:"aggregator_target_limit,omitempty"`
	Signers []string `json:"signers,omitempty"`
	KeysignMs *int64 `json:"keysign_ms,omitempty"`
	OutHashes []string `json:"out_hashes,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewObservedTx instantiates a new ObservedTx object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservedTx(tx Tx) *ObservedTx {
	this := ObservedTx{}
	this.Tx = tx
	return &this
}

// NewObservedTxWithDefaults instantiates a new ObservedTx object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservedTxWithDefaults() *ObservedTx {
	this := ObservedTx{}
	return &this
}

// GetTx returns the Tx field value
func (o *ObservedTx) GetTx() Tx {
	if o == nil {
		var ret Tx
		return ret
	}

	return o.Tx
}

// GetTxOk returns a tuple with the Tx field value
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetTxOk() (*Tx, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tx, true
}

// SetTx sets field value
func (o *ObservedTx) SetTx(v Tx) {
	o.Tx = v
}

// GetObservedPubKey returns the ObservedPubKey field value if set, zero value otherwise.
func (o *ObservedTx) GetObservedPubKey() string {
	if o == nil || o.ObservedPubKey == nil {
		var ret string
		return ret
	}
	return *o.ObservedPubKey
}

// GetObservedPubKeyOk returns a tuple with the ObservedPubKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetObservedPubKeyOk() (*string, bool) {
	if o == nil || o.ObservedPubKey == nil {
		return nil, false
	}
	return o.ObservedPubKey, true
}

// HasObservedPubKey returns a boolean if a field has been set.
func (o *ObservedTx) HasObservedPubKey() bool {
	if o != nil && o.ObservedPubKey != nil {
		return true
	}

	return false
}

// SetObservedPubKey gets a reference to the given string and assigns it to the ObservedPubKey field.
func (o *ObservedTx) SetObservedPubKey(v string) {
	o.ObservedPubKey = &v
}

// GetExternalObservedHeight returns the ExternalObservedHeight field value if set, zero value otherwise.
func (o *ObservedTx) GetExternalObservedHeight() int64 {
	if o == nil || o.ExternalObservedHeight == nil {
		var ret int64
		return ret
	}
	return *o.ExternalObservedHeight
}

// GetExternalObservedHeightOk returns a tuple with the ExternalObservedHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetExternalObservedHeightOk() (*int64, bool) {
	if o == nil || o.ExternalObservedHeight == nil {
		return nil, false
	}
	return o.ExternalObservedHeight, true
}

// HasExternalObservedHeight returns a boolean if a field has been set.
func (o *ObservedTx) HasExternalObservedHeight() bool {
	if o != nil && o.ExternalObservedHeight != nil {
		return true
	}

	return false
}

// SetExternalObservedHeight gets a reference to the given int64 and assigns it to the ExternalObservedHeight field.
func (o *ObservedTx) SetExternalObservedHeight(v int64) {
	o.ExternalObservedHeight = &v
}

// GetExternalConfirmationDelayHeight returns the ExternalConfirmationDelayHeight field value if set, zero value otherwise.
func (o *ObservedTx) GetExternalConfirmationDelayHeight() int64 {
	if o == nil || o.ExternalConfirmationDelayHeight == nil {
		var ret int64
		return ret
	}
	return *o.ExternalConfirmationDelayHeight
}

// GetExternalConfirmationDelayHeightOk returns a tuple with the ExternalConfirmationDelayHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetExternalConfirmationDelayHeightOk() (*int64, bool) {
	if o == nil || o.ExternalConfirmationDelayHeight == nil {
		return nil, false
	}
	return o.ExternalConfirmationDelayHeight, true
}

// HasExternalConfirmationDelayHeight returns a boolean if a field has been set.
func (o *ObservedTx) HasExternalConfirmationDelayHeight() bool {
	if o != nil && o.ExternalConfirmationDelayHeight != nil {
		return true
	}

	return false
}

// SetExternalConfirmationDelayHeight gets a reference to the given int64 and assigns it to the ExternalConfirmationDelayHeight field.
func (o *ObservedTx) SetExternalConfirmationDelayHeight(v int64) {
	o.ExternalConfirmationDelayHeight = &v
}

// GetAggregator returns the Aggregator field value if set, zero value otherwise.
func (o *ObservedTx) GetAggregator() string {
	if o == nil || o.Aggregator == nil {
		var ret string
		return ret
	}
	return *o.Aggregator
}

// GetAggregatorOk returns a tuple with the Aggregator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetAggregatorOk() (*string, bool) {
	if o == nil || o.Aggregator == nil {
		return nil, false
	}
	return o.Aggregator, true
}

// HasAggregator returns a boolean if a field has been set.
func (o *ObservedTx) HasAggregator() bool {
	if o != nil && o.Aggregator != nil {
		return true
	}

	return false
}

// SetAggregator gets a reference to the given string and assigns it to the Aggregator field.
func (o *ObservedTx) SetAggregator(v string) {
	o.Aggregator = &v
}

// GetAggregatorTarget returns the AggregatorTarget field value if set, zero value otherwise.
func (o *ObservedTx) GetAggregatorTarget() string {
	if o == nil || o.AggregatorTarget == nil {
		var ret string
		return ret
	}
	return *o.AggregatorTarget
}

// GetAggregatorTargetOk returns a tuple with the AggregatorTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetAggregatorTargetOk() (*string, bool) {
	if o == nil || o.AggregatorTarget == nil {
		return nil, false
	}
	return o.AggregatorTarget, true
}

// HasAggregatorTarget returns a boolean if a field has been set.
func (o *ObservedTx) HasAggregatorTarget() bool {
	if o != nil && o.AggregatorTarget != nil {
		return true
	}

	return false
}

// SetAggregatorTarget gets a reference to the given string and assigns it to the AggregatorTarget field.
func (o *ObservedTx) SetAggregatorTarget(v string) {
	o.AggregatorTarget = &v
}

// GetAggregatorTargetLimit returns the AggregatorTargetLimit field value if set, zero value otherwise.
func (o *ObservedTx) GetAggregatorTargetLimit() string {
	if o == nil || o.AggregatorTargetLimit == nil {
		var ret string
		return ret
	}
	return *o.AggregatorTargetLimit
}

// GetAggregatorTargetLimitOk returns a tuple with the AggregatorTargetLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetAggregatorTargetLimitOk() (*string, bool) {
	if o == nil || o.AggregatorTargetLimit == nil {
		return nil, false
	}
	return o.AggregatorTargetLimit, true
}

// HasAggregatorTargetLimit returns a boolean if a field has been set.
func (o *ObservedTx) HasAggregatorTargetLimit() bool {
	if o != nil && o.AggregatorTargetLimit != nil {
		return true
	}

	return false
}

// SetAggregatorTargetLimit gets a reference to the given string and assigns it to the AggregatorTargetLimit field.
func (o *ObservedTx) SetAggregatorTargetLimit(v string) {
	o.AggregatorTargetLimit = &v
}

// GetSigners returns the Signers field value if set, zero value otherwise.
func (o *ObservedTx) GetSigners() []string {
	if o == nil || o.Signers == nil {
		var ret []string
		return ret
	}
	return o.Signers
}

// GetSignersOk returns a tuple with the Signers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetSignersOk() ([]string, bool) {
	if o == nil || o.Signers == nil {
		return nil, false
	}
	return o.Signers, true
}

// HasSigners returns a boolean if a field has been set.
func (o *ObservedTx) HasSigners() bool {
	if o != nil && o.Signers != nil {
		return true
	}

	return false
}

// SetSigners gets a reference to the given []string and assigns it to the Signers field.
func (o *ObservedTx) SetSigners(v []string) {
	o.Signers = v
}

// GetKeysignMs returns the KeysignMs field value if set, zero value otherwise.
func (o *ObservedTx) GetKeysignMs() int64 {
	if o == nil || o.KeysignMs == nil {
		var ret int64
		return ret
	}
	return *o.KeysignMs
}

// GetKeysignMsOk returns a tuple with the KeysignMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetKeysignMsOk() (*int64, bool) {
	if o == nil || o.KeysignMs == nil {
		return nil, false
	}
	return o.KeysignMs, true
}

// HasKeysignMs returns a boolean if a field has been set.
func (o *ObservedTx) HasKeysignMs() bool {
	if o != nil && o.KeysignMs != nil {
		return true
	}

	return false
}

// SetKeysignMs gets a reference to the given int64 and assigns it to the KeysignMs field.
func (o *ObservedTx) SetKeysignMs(v int64) {
	o.KeysignMs = &v
}

// GetOutHashes returns the OutHashes field value if set, zero value otherwise.
func (o *ObservedTx) GetOutHashes() []string {
	if o == nil || o.OutHashes == nil {
		var ret []string
		return ret
	}
	return o.OutHashes
}

// GetOutHashesOk returns a tuple with the OutHashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetOutHashesOk() ([]string, bool) {
	if o == nil || o.OutHashes == nil {
		return nil, false
	}
	return o.OutHashes, true
}

// HasOutHashes returns a boolean if a field has been set.
func (o *ObservedTx) HasOutHashes() bool {
	if o != nil && o.OutHashes != nil {
		return true
	}

	return false
}

// SetOutHashes gets a reference to the given []string and assigns it to the OutHashes field.
func (o *ObservedTx) SetOutHashes(v []string) {
	o.OutHashes = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ObservedTx) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservedTx) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ObservedTx) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ObservedTx) SetStatus(v string) {
	o.Status = &v
}

func (o ObservedTx) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tx"] = o.Tx
	}
	if o.ObservedPubKey != nil {
		toSerialize["observed_pub_key"] = o.ObservedPubKey
	}
	if o.ExternalObservedHeight != nil {
		toSerialize["external_observed_height"] = o.ExternalObservedHeight
	}
	if o.ExternalConfirmationDelayHeight != nil {
		toSerialize["external_confirmation_delay_height"] = o.ExternalConfirmationDelayHeight
	}
	if o.Aggregator != nil {
		toSerialize["aggregator"] = o.Aggregator
	}
	if o.AggregatorTarget != nil {
		toSerialize["aggregator_target"] = o.AggregatorTarget
	}
	if o.AggregatorTargetLimit != nil {
		toSerialize["aggregator_target_limit"] = o.AggregatorTargetLimit
	}
	if o.Signers != nil {
		toSerialize["signers"] = o.Signers
	}
	if o.KeysignMs != nil {
		toSerialize["keysign_ms"] = o.KeysignMs
	}
	if o.OutHashes != nil {
		toSerialize["out_hashes"] = o.OutHashes
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableObservedTx struct {
	value *ObservedTx
	isSet bool
}

func (v NullableObservedTx) Get() *ObservedTx {
	return v.value
}

func (v *NullableObservedTx) Set(val *ObservedTx) {
	v.value = val
	v.isSet = true
}

func (v NullableObservedTx) IsSet() bool {
	return v.isSet
}

func (v *NullableObservedTx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservedTx(val *ObservedTx) *NullableObservedTx {
	return &NullableObservedTx{value: val, isSet: true}
}

func (v NullableObservedTx) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservedTx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


