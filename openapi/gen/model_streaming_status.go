/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StreamingStatus struct for StreamingStatus
type StreamingStatus struct {
	// how often each swap is made, in blocks
	Interval int64 `json:"interval"`
	// the total number of swaps in a streaming swaps
	Quantity int64 `json:"quantity"`
	// the amount of swap attempts so far
	Count int64 `json:"count"`
}

// NewStreamingStatus instantiates a new StreamingStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamingStatus(interval int64, quantity int64, count int64) *StreamingStatus {
	this := StreamingStatus{}
	this.Interval = interval
	this.Quantity = quantity
	this.Count = count
	return &this
}

// NewStreamingStatusWithDefaults instantiates a new StreamingStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamingStatusWithDefaults() *StreamingStatus {
	this := StreamingStatus{}
	return &this
}

// GetInterval returns the Interval field value
func (o *StreamingStatus) GetInterval() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *StreamingStatus) GetIntervalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *StreamingStatus) SetInterval(v int64) {
	o.Interval = v
}

// GetQuantity returns the Quantity field value
func (o *StreamingStatus) GetQuantity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *StreamingStatus) GetQuantityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *StreamingStatus) SetQuantity(v int64) {
	o.Quantity = v
}

// GetCount returns the Count field value
func (o *StreamingStatus) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *StreamingStatus) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *StreamingStatus) SetCount(v int64) {
	o.Count = v
}

func (o StreamingStatus) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["interval"] = o.Interval
	}
	if true {
		toSerialize["quantity"] = o.Quantity
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableStreamingStatus struct {
	value *StreamingStatus
	isSet bool
}

func (v NullableStreamingStatus) Get() *StreamingStatus {
	return v.value
}

func (v *NullableStreamingStatus) Set(val *StreamingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamingStatus(val *StreamingStatus) *NullableStreamingStatus {
	return &NullableStreamingStatus{value: val, isSet: true}
}

func (v NullableStreamingStatus) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


