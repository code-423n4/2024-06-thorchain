/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Ping struct for Ping
type Ping struct {
	Ping *string `json:"ping,omitempty"`
}

// NewPing instantiates a new Ping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPing() *Ping {
	this := Ping{}
	return &this
}

// NewPingWithDefaults instantiates a new Ping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingWithDefaults() *Ping {
	this := Ping{}
	return &this
}

// GetPing returns the Ping field value if set, zero value otherwise.
func (o *Ping) GetPing() string {
	if o == nil || o.Ping == nil {
		var ret string
		return ret
	}
	return *o.Ping
}

// GetPingOk returns a tuple with the Ping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ping) GetPingOk() (*string, bool) {
	if o == nil || o.Ping == nil {
		return nil, false
	}
	return o.Ping, true
}

// HasPing returns a boolean if a field has been set.
func (o *Ping) HasPing() bool {
	if o != nil && o.Ping != nil {
		return true
	}

	return false
}

// SetPing gets a reference to the given string and assigns it to the Ping field.
func (o *Ping) SetPing(v string) {
	o.Ping = &v
}

func (o Ping) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ping != nil {
		toSerialize["ping"] = o.Ping
	}
	return json.Marshal(toSerialize)
}

type NullablePing struct {
	value *Ping
	isSet bool
}

func (v NullablePing) Get() *Ping {
	return v.value
}

func (v *NullablePing) Set(val *Ping) {
	v.value = val
	v.isSet = true
}

func (v NullablePing) IsSet() bool {
	return v.isSet
}

func (v *NullablePing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePing(val *Ping) *NullablePing {
	return &NullablePing{value: val, isSet: true}
}

func (v NullablePing) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


