/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MimirNodesResponse struct for MimirNodesResponse
type MimirNodesResponse struct {
	Mimirs []MimirVote `json:"mimirs,omitempty"`
}

// NewMimirNodesResponse instantiates a new MimirNodesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMimirNodesResponse() *MimirNodesResponse {
	this := MimirNodesResponse{}
	return &this
}

// NewMimirNodesResponseWithDefaults instantiates a new MimirNodesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMimirNodesResponseWithDefaults() *MimirNodesResponse {
	this := MimirNodesResponse{}
	return &this
}

// GetMimirs returns the Mimirs field value if set, zero value otherwise.
func (o *MimirNodesResponse) GetMimirs() []MimirVote {
	if o == nil || o.Mimirs == nil {
		var ret []MimirVote
		return ret
	}
	return o.Mimirs
}

// GetMimirsOk returns a tuple with the Mimirs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MimirNodesResponse) GetMimirsOk() ([]MimirVote, bool) {
	if o == nil || o.Mimirs == nil {
		return nil, false
	}
	return o.Mimirs, true
}

// HasMimirs returns a boolean if a field has been set.
func (o *MimirNodesResponse) HasMimirs() bool {
	if o != nil && o.Mimirs != nil {
		return true
	}

	return false
}

// SetMimirs gets a reference to the given []MimirVote and assigns it to the Mimirs field.
func (o *MimirNodesResponse) SetMimirs(v []MimirVote) {
	o.Mimirs = v
}

func (o MimirNodesResponse) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Mimirs != nil {
		toSerialize["mimirs"] = o.Mimirs
	}
	return json.Marshal(toSerialize)
}

type NullableMimirNodesResponse struct {
	value *MimirNodesResponse
	isSet bool
}

func (v NullableMimirNodesResponse) Get() *MimirNodesResponse {
	return v.value
}

func (v *NullableMimirNodesResponse) Set(val *MimirNodesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMimirNodesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMimirNodesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMimirNodesResponse(val *MimirNodesResponse) *NullableMimirNodesResponse {
	return &NullableMimirNodesResponse{value: val, isSet: true}
}

func (v NullableMimirNodesResponse) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMimirNodesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


