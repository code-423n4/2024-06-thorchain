/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MimirV2IDsResponse struct for MimirV2IDsResponse
type MimirV2IDsResponse struct {
	Id int `json:"id"`
	Name string `json:"name"`
	VoteKey string `json:"vote_key"`
	LegacyKey string `json:"legacy_key"`
	Type string `json:"type"`
	Votes map[string]int64 `json:"votes"`
}

// NewMimirV2IDsResponse instantiates a new MimirV2IDsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMimirV2IDsResponse(id int, name string, voteKey string, legacyKey string, type_ string, votes map[string]int64) *MimirV2IDsResponse {
	this := MimirV2IDsResponse{}
	this.Id = id
	this.Name = name
	this.VoteKey = voteKey
	this.LegacyKey = legacyKey
	this.Type = type_
	this.Votes = votes
	return &this
}

// NewMimirV2IDsResponseWithDefaults instantiates a new MimirV2IDsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMimirV2IDsResponseWithDefaults() *MimirV2IDsResponse {
	this := MimirV2IDsResponse{}
	return &this
}

// GetId returns the Id field value
func (o *MimirV2IDsResponse) GetId() int {
	if o == nil {
		var ret int
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetIdOk() (*int, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MimirV2IDsResponse) SetId(v int) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MimirV2IDsResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MimirV2IDsResponse) SetName(v string) {
	o.Name = v
}

// GetVoteKey returns the VoteKey field value
func (o *MimirV2IDsResponse) GetVoteKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VoteKey
}

// GetVoteKeyOk returns a tuple with the VoteKey field value
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetVoteKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VoteKey, true
}

// SetVoteKey sets field value
func (o *MimirV2IDsResponse) SetVoteKey(v string) {
	o.VoteKey = v
}

// GetLegacyKey returns the LegacyKey field value
func (o *MimirV2IDsResponse) GetLegacyKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LegacyKey
}

// GetLegacyKeyOk returns a tuple with the LegacyKey field value
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetLegacyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LegacyKey, true
}

// SetLegacyKey sets field value
func (o *MimirV2IDsResponse) SetLegacyKey(v string) {
	o.LegacyKey = v
}

// GetType returns the Type field value
func (o *MimirV2IDsResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MimirV2IDsResponse) SetType(v string) {
	o.Type = v
}

// GetVotes returns the Votes field value
func (o *MimirV2IDsResponse) GetVotes() map[string]int64 {
	if o == nil {
		var ret map[string]int64
		return ret
	}

	return o.Votes
}

// GetVotesOk returns a tuple with the Votes field value
// and a boolean to check if the value has been set.
func (o *MimirV2IDsResponse) GetVotesOk() (*map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Votes, true
}

// SetVotes sets field value
func (o *MimirV2IDsResponse) SetVotes(v map[string]int64) {
	o.Votes = v
}

func (o MimirV2IDsResponse) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["vote_key"] = o.VoteKey
	}
	if true {
		toSerialize["legacy_key"] = o.LegacyKey
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["votes"] = o.Votes
	}
	return json.Marshal(toSerialize)
}

type NullableMimirV2IDsResponse struct {
	value *MimirV2IDsResponse
	isSet bool
}

func (v NullableMimirV2IDsResponse) Get() *MimirV2IDsResponse {
	return v.value
}

func (v *NullableMimirV2IDsResponse) Set(val *MimirV2IDsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMimirV2IDsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMimirV2IDsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMimirV2IDsResponse(val *MimirV2IDsResponse) *NullableMimirV2IDsResponse {
	return &NullableMimirV2IDsResponse{value: val, isSet: true}
}

func (v NullableMimirV2IDsResponse) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMimirV2IDsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


