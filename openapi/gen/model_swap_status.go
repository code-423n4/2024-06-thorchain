/*
Thornode API

Thornode REST API.

Contact: devs@thorchain.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SwapStatus struct for SwapStatus
type SwapStatus struct {
	// true when awaiting a swap
	Pending bool `json:"pending"`
	Streaming *StreamingStatus `json:"streaming,omitempty"`
}

// NewSwapStatus instantiates a new SwapStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwapStatus(pending bool) *SwapStatus {
	this := SwapStatus{}
	this.Pending = pending
	return &this
}

// NewSwapStatusWithDefaults instantiates a new SwapStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwapStatusWithDefaults() *SwapStatus {
	this := SwapStatus{}
	return &this
}

// GetPending returns the Pending field value
func (o *SwapStatus) GetPending() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pending
}

// GetPendingOk returns a tuple with the Pending field value
// and a boolean to check if the value has been set.
func (o *SwapStatus) GetPendingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pending, true
}

// SetPending sets field value
func (o *SwapStatus) SetPending(v bool) {
	o.Pending = v
}

// GetStreaming returns the Streaming field value if set, zero value otherwise.
func (o *SwapStatus) GetStreaming() StreamingStatus {
	if o == nil || o.Streaming == nil {
		var ret StreamingStatus
		return ret
	}
	return *o.Streaming
}

// GetStreamingOk returns a tuple with the Streaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwapStatus) GetStreamingOk() (*StreamingStatus, bool) {
	if o == nil || o.Streaming == nil {
		return nil, false
	}
	return o.Streaming, true
}

// HasStreaming returns a boolean if a field has been set.
func (o *SwapStatus) HasStreaming() bool {
	if o != nil && o.Streaming != nil {
		return true
	}

	return false
}

// SetStreaming gets a reference to the given StreamingStatus and assigns it to the Streaming field.
func (o *SwapStatus) SetStreaming(v StreamingStatus) {
	o.Streaming = &v
}

func (o SwapStatus) MarshalJSON_deprecated() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pending"] = o.Pending
	}
	if o.Streaming != nil {
		toSerialize["streaming"] = o.Streaming
	}
	return json.Marshal(toSerialize)
}

type NullableSwapStatus struct {
	value *SwapStatus
	isSet bool
}

func (v NullableSwapStatus) Get() *SwapStatus {
	return v.value
}

func (v *NullableSwapStatus) Set(val *SwapStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSwapStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSwapStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwapStatus(val *SwapStatus) *NullableSwapStatus {
	return &NullableSwapStatus{value: val, isSet: true}
}

func (v NullableSwapStatus) MarshalJSON_deprecated() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwapStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


